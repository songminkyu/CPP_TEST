<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classnc_1_1roots_1_1_dekker" kind="class" language="C++" prot="public">
    <compoundname>nc::roots::Dekker</compoundname>
    <basecompoundref refid="classnc_1_1roots_1_1_iteration" prot="public" virt="non-virtual">nc::roots::Iteration</basecompoundref>
    <includes refid="_dekker_8hpp" local="no">Dekker.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnc_1_1roots_1_1_dekker_1abae5bd70cb960e030627f6be6c63aca1" prot="private" static="no" mutable="no">
        <type>const std::function&lt; double(double)&gt;</type>
        <definition>const std::function&lt;double(double)&gt; nc::roots::Dekker::f_</definition>
        <argsstring></argsstring>
        <name>f_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="135" column="33" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnc_1_1roots_1_1_dekker_1ab0a5db20e82cfd3ef95810ccb7d8c4e6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>nc::roots::Dekker::Dekker</definition>
        <argsstring>(const double epsilon, const uint32 maxNumIterations, std::function&lt; double(double)&gt; f) noexcept</argsstring>
        <name>Dekker</name>
        <param>
          <type>const double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>maxNumIterations</declname>
        </param>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxNumIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of iterations to perform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="74" column="13" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_dekker_1a77b88bb369da2d03d34717b7d8e0a2ab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>nc::roots::Dekker::Dekker</definition>
        <argsstring>(const double epsilon, std::function&lt; double(double)&gt; f) noexcept</argsstring>
        <name>Dekker</name>
        <param>
          <type>const double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="60" column="13" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_dekker_1a49413387fbe4d12e20569d175fa7f486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nc::roots::Dekker::~Dekker</definition>
        <argsstring>() override=default</argsstring>
        <name>~Dekker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="85" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_iteration_1ab3192d0f9de4b8b27b23013c65489e5a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
        <definition>uint32 nc::roots::Iteration::numIterations</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numIterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of iterations</para>
<para><simplesect kind="return"><para>: number of iterations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="84" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_dekker_1a5da7506a8f371764d0fae321fe081111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::roots::Dekker::solve</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>solve</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Solves for the root in the range [a, b]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>root between the bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="95" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="95" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnc_1_1roots_1_1_dekker_1a740b47212cfe0658b1418657fcbfb35e" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double nc::roots::Dekker::calculateBisection</definition>
        <argsstring>(double a, double b) noexcept</argsstring>
        <name>calculateBisection</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the bisection point</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bisection point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="180" column="27" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_dekker_1ae219a8982122af195a07a6d161d764aa" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double nc::roots::Dekker::calculateSecant</definition>
        <argsstring>(double b, double fb, double lastB, double lastFb) noexcept</argsstring>
        <name>calculateSecant</name>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lastB</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lastFb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates secant</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evalulated at the upper bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastB</parametername>
</parameternamelist>
<parameterdescription>
<para>the last upper bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastFb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evalulated at the last upper bound @ return secant value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="166" column="27" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_dekker_1abcbc1b0e02fbcef4132943560c36acf4" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nc::roots::Dekker::checkAndFixAlgorithmCriteria</definition>
        <argsstring>(double &amp;a, double &amp;b, double &amp;fa, double &amp;fb) noexcept</argsstring>
        <name>checkAndFixAlgorithmCriteria</name>
        <param>
          <type>double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks the bounds criteria</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evalulated at the lower bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evalulated at the upper bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="146" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_dekker_1a2a6ad72e459f0cb3367475c7f74b5bb0" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool nc::roots::Dekker::useSecantMethod</definition>
        <argsstring>(double b, double s, double m) noexcept</argsstring>
        <name>useSecantMethod</name>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether or not to use the secant method</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>@ return bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="194" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="194" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnc_1_1roots_1_1_iteration_1a5eafe219bb90f82da4ece84f012a411a" prot="protected" static="no" mutable="no">
        <type>const double</type>
        <definition>const double nc::roots::Iteration::epsilon_</definition>
        <argsstring></argsstring>
        <name>epsilon_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="115" column="29" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1roots_1_1_iteration_1a9b1c4ea8cf91c5308020c105293b4a02" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
        <definition>uint32 nc::roots::Iteration::maxNumIterations_</definition>
        <argsstring></argsstring>
        <name>maxNumIterations_</name>
        <initializer>{1000}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="116" column="29" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1roots_1_1_iteration_1a84d7f2f7412d1f54861edeacc7bc0c20" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
        <definition>uint32 nc::roots::Iteration::numIterations_</definition>
        <argsstring></argsstring>
        <name>numIterations_</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="117" column="29" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnc_1_1roots_1_1_iteration_1ad0262a1a694e734ebc154c77f010bcff" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::roots::Iteration::incrementNumberOfIterations</definition>
        <argsstring>()</argsstring>
        <name>incrementNumberOfIterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Incraments the number of iterations</para>
<para><simplesect kind="return"><para>the number of iterations prior to incramenting </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="105" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="105" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_iteration_1a85e79a4794bc3a6ac6bc3564956737a2" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::roots::Iteration::resetNumberOfIterations</definition>
        <argsstring>() noexcept</argsstring>
        <name>resetNumberOfIterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets the number of iterations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="94" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classnc_1_1roots_1_1_dekker" kindref="compound">Dekker</ref> root finding method </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nc::roots::Iteration</label>
        <link refid="classnc_1_1roots_1_1_iteration"/>
      </node>
      <node id="1">
        <label>nc::roots::Dekker</label>
        <link refid="classnc_1_1roots_1_1_dekker"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nc::roots::Iteration</label>
        <link refid="classnc_1_1roots_1_1_iteration"/>
      </node>
      <node id="1">
        <label>nc::roots::Dekker</label>
        <link refid="classnc_1_1roots_1_1_dekker"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" line="51" column="1" bodyfile="C:/Github/NumCpp/include/NumCpp/Roots/Dekker.hpp" bodystart="50" bodyend="200"/>
    <listofallmembers>
      <member refid="classnc_1_1roots_1_1_dekker_1a740b47212cfe0658b1418657fcbfb35e" prot="private" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>calculateBisection</name></member>
      <member refid="classnc_1_1roots_1_1_dekker_1ae219a8982122af195a07a6d161d764aa" prot="private" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>calculateSecant</name></member>
      <member refid="classnc_1_1roots_1_1_dekker_1abcbc1b0e02fbcef4132943560c36acf4" prot="private" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>checkAndFixAlgorithmCriteria</name></member>
      <member refid="classnc_1_1roots_1_1_dekker_1a77b88bb369da2d03d34717b7d8e0a2ab" prot="public" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>Dekker</name></member>
      <member refid="classnc_1_1roots_1_1_dekker_1ab0a5db20e82cfd3ef95810ccb7d8c4e6" prot="public" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>Dekker</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a5eafe219bb90f82da4ece84f012a411a" prot="protected" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>epsilon_</name></member>
      <member refid="classnc_1_1roots_1_1_dekker_1abae5bd70cb960e030627f6be6c63aca1" prot="private" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>f_</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1ad0262a1a694e734ebc154c77f010bcff" prot="protected" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>incrementNumberOfIterations</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a2d7285a81c033d56ce8283b6dbfca136" prot="public" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>Iteration</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a7948f08cfaa01f5685ec35149bf6bba0" prot="public" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>Iteration</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a9b1c4ea8cf91c5308020c105293b4a02" prot="protected" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>maxNumIterations_</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1ab3192d0f9de4b8b27b23013c65489e5a" prot="public" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>numIterations</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a84d7f2f7412d1f54861edeacc7bc0c20" prot="protected" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>numIterations_</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a85e79a4794bc3a6ac6bc3564956737a2" prot="protected" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>resetNumberOfIterations</name></member>
      <member refid="classnc_1_1roots_1_1_dekker_1a5da7506a8f371764d0fae321fe081111" prot="public" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>solve</name></member>
      <member refid="classnc_1_1roots_1_1_dekker_1a2a6ad72e459f0cb3367475c7f74b5bb0" prot="private" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>useSecantMethod</name></member>
      <member refid="classnc_1_1roots_1_1_dekker_1a49413387fbe4d12e20569d175fa7f486" prot="public" virt="non-virtual"><scope>nc::roots::Dekker</scope><name>~Dekker</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a44492e4a1849938cd7017154213ec002" prot="public" virt="virtual"><scope>nc::roots::Dekker</scope><name>~Iteration</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
