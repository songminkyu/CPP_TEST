<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacenc_1_1stl__algorithms" kind="namespace" language="C++">
    <compoundname>nc::stl_algorithms</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a6c632e800fd350eb36ea01eb522eeb1f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::all_of</definition>
        <argsstring>(InputIt first, InputIt last, UnaryPredicate p) noexcept</argsstring>
        <name>all_of</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if all of the elements of a range satisy a predicate</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>unary predicate function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="58" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a0ae9c71c7298f83822ab49d270c867ba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::any_of</definition>
        <argsstring>(InputIt first, InputIt last, UnaryPredicate p) noexcept</argsstring>
        <name>any_of</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if any of the elements of a range satisy a predicate</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>unary predicate function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="77" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="77" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ae62a4e197ec640aacea520220bd27cef" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::copy</definition>
        <argsstring>(InputIt first, InputIt last, OutputIt destination) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies from one container to another</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="96" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="96" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a1fa02155befc0c39a853e66f6df26745" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::iterator_traits&lt; InputIt &gt;::difference_type</type>
        <definition>std::iterator_traits&lt;InputIt&gt;::difference_type nc::stl_algorithms::count</definition>
        <argsstring>(InputIt first, InputIt last, const T &amp;value) noexcept</argsstring>
        <name>count</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts the values in the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="116" column="13" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ab200b92040bf3da8ee4325f5a994e73d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::equal</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2) noexcept</argsstring>
        <name>equal</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if two ranges are equal</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of first container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of first container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of second container </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="136" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="136" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a684d1011b375da4078afb4474a36b0e6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class BinaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::equal</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPredicate p) noexcept</argsstring>
        <name>equal</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>BinaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if two ranges are equal</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of first container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of first container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of second container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>binary predicate to compare the elements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="156" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="156" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1af9a01fcb79e7a69b707081c1c17f361c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::fill</definition>
        <argsstring>(ForwardIt first, ForwardIt last, const T &amp;value) noexcept</argsstring>
        <name>fill</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the range with the value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="175" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="175" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a761aa9f3bd88f019c46fe6cece93ade2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>InputIt</type>
        <definition>InputIt nc::stl_algorithms::find</definition>
        <argsstring>(InputIt first, InputIt last, const T &amp;value) noexcept</argsstring>
        <name>find</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the first element in the range [first, last) that satisfies specific criteria:</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>InputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="196" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="196" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a734698435eabdbc5bdf93b195d7fb6a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class UnaryFunction</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::for_each</definition>
        <argsstring>(InputIt first, InputIt last, UnaryFunction f)</argsstring>
        <name>for_each</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>UnaryFunction</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the function on each element of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="214" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="214" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1aca7862e3fe066fc65bf00cb7f5108e33" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::is_sorted</definition>
        <argsstring>(ForwardIt first, ForwardIt last) noexcept</argsstring>
        <name>is_sorted</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the array is sorted</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool true if sorted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="232" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="232" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a1f71dfda5f16d8a53c16260c5fa8fbdc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::is_sorted</definition>
        <argsstring>(ForwardIt first, ForwardIt last, Compare comp) noexcept</argsstring>
        <name>is_sorted</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the array is sorted</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool true if sorted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="251" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="251" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a334cd50f7f10f689f82fa2ba7c5d88b2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>ForwardIt</type>
        <definition>ForwardIt nc::stl_algorithms::max_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last) noexcept</argsstring>
        <name>max_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum element of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ForwordIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="269" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="269" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a282a4146afe33e4abb012e5c6b332948" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>ForwardIt</type>
        <definition>ForwardIt nc::stl_algorithms::max_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last, Compare comp) noexcept</argsstring>
        <name>max_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum element of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ForwordIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="288" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="288" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1af6291d1011c61c416134bc28def6f3ac" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>ForwardIt</type>
        <definition>ForwardIt nc::stl_algorithms::min_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last) noexcept</argsstring>
        <name>min_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the minimum element of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ForwardIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="305" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="305" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1acb252e962fc7cedee9f4257453480d2b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>ForwardIt</type>
        <definition>ForwardIt nc::stl_algorithms::min_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last, Compare comp) noexcept</argsstring>
        <name>min_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the minimum element of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ForwordIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="324" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="324" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a919ee9141ca95be989ad9b872a7ebd27" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; ForwardIt, ForwardIt &gt;</type>
        <definition>std::pair&lt;ForwardIt, ForwardIt&gt; nc::stl_algorithms::minmax_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last) noexcept</argsstring>
        <name>minmax_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the minimum and maximum elements of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="342" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="342" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ae1007b77aafe5a99b4952d9a8d8307af" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; ForwardIt, ForwardIt &gt;</type>
        <definition>std::pair&lt;ForwardIt, ForwardIt&gt; nc::stl_algorithms::minmax_element</definition>
        <argsstring>(ForwardIt first, ForwardIt last, Compare comp) noexcept</argsstring>
        <name>minmax_element</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runs the minimum and maximum elements of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="361" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="361" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a2804ccb14980f96c7680838adc3b2762" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class UnaryPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::stl_algorithms::none_of</definition>
        <argsstring>(InputIt first, InputIt last, UnaryPredicate p) noexcept</argsstring>
        <name>none_of</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>UnaryPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if none of the elements of a range satisy a predicate</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>unary predicate function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="380" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="380" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1af5ef45ab7814938799020ad24358b734" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::nth_element</definition>
        <argsstring>(RandomIt first, RandomIt nth, RandomIt last) noexcept</argsstring>
        <name>nth_element</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>nth</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts up to the nth element</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nth</parametername>
</parameternamelist>
<parameterdescription>
<para>the element that should be sorted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="398" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="398" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a9928869b550b082898709c5671936079" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::nth_element</definition>
        <argsstring>(RandomIt first, RandomIt nth, RandomIt last, Compare comp) noexcept</argsstring>
        <name>nth_element</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>nth</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts up to the nth element</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nth</parametername>
</parameternamelist>
<parameterdescription>
<para>the element that should be sorted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="417" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="417" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1aa8d46043c9c62a348687ef8aa0a3286b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::replace</definition>
        <argsstring>(ForwardIt first, ForwardIt last, const T &amp;oldValue, const T &amp;newValue) noexcept</argsstring>
        <name>replace</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>oldValue</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>replaces a value in the range with another value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to replace </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the replacement value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="436" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="436" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a5334750b4a1bb38d3932bffcc32a71b4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BidirIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::reverse</definition>
        <argsstring>(BidirIt first, BidirIt last) noexcept</argsstring>
        <name>reverse</name>
        <param>
          <type>BidirIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>BidirIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverses the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="454" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="454" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1acfc1538e29a04fe5158405c710e5eaa7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::rotate</definition>
        <argsstring>(ForwardIt first, ForwardIt firstN, ForwardIt last) noexcept</argsstring>
        <name>rotate</name>
        <param>
          <type>ForwardIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>firstN</declname>
        </param>
        <param>
          <type>ForwardIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotates the elements of a range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstN</parametername>
</parameternamelist>
<parameterdescription>
<para>the element that should appear at the beginning of the rotated range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="472" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="472" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a8cc83e2fb7a3d8302db0f4b19513ddd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_difference</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination)</argsstring>
        <name>set_difference</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the difference of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="493" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="493" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a8a145ff0f4cf32b64e7464347d1ea9b2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_difference</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination, Compare comp) noexcept</argsstring>
        <name>set_difference</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the difference of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="517" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="517" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1aa8ff8c5bb6003ff0f02a17deb4ced8e2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_intersection</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination) noexcept</argsstring>
        <name>set_intersection</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the intersection of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="540" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="540" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1ad9a963ad13c86117f01fe2960525e074" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_intersection</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination, Compare comp) noexcept</argsstring>
        <name>set_intersection</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the intersection of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="564" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="564" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a273ff7212f84bcd8de30e83ab0ae3bd1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_union</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination) noexcept</argsstring>
        <name>set_union</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the union of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="587" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="587" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a33da2f830ebf2e7c04f1ac94e1ad20b7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::set_union</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt destination, Compare comp) noexcept</argsstring>
        <name>set_union</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>last2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds the union of two ranges</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="611" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="611" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a1d75d47f198fcc3693e87806d6ea8715" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::sort</definition>
        <argsstring>(RandomIt first, RandomIt last) noexcept</argsstring>
        <name>sort</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="630" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="630" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a519432fa55645fab8162c354e387b1a6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::sort</definition>
        <argsstring>(RandomIt first, RandomIt last, Compare comp) noexcept</argsstring>
        <name>sort</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="648" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="648" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a3b9f4bb9ba9a3ea8d8f97258eaa732d9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::stable_sort</definition>
        <argsstring>(RandomIt first, RandomIt last) noexcept</argsstring>
        <name>stable_sort</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts the range preserving order</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="665" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="665" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a7b2c4b6a3ef5cc55ebdae2aa757d1874" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomIt</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::stl_algorithms::stable_sort</definition>
        <argsstring>(RandomIt first, RandomIt last, Compare comp) noexcept</argsstring>
        <name>stable_sort</name>
        <param>
          <type>RandomIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>RandomIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts the range preserving order</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the comparitor function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="683" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="683" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a616d5dabd547326285946d0014361ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class UnaryOperation</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::transform</definition>
        <argsstring>(InputIt first, InputIt last, OutputIt destination, UnaryOperation unaryFunction)</argsstring>
        <name>transform</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>UnaryOperation</type>
          <declname>unaryFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transforms the elements of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unaryFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="703" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="703" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1af358fec5563ae500162b310fe263a36d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt1</type>
          </param>
          <param>
            <type>class InputIt2</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class BinaryOperation</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt nc::stl_algorithms::transform</definition>
        <argsstring>(InputIt1 first1, InputIt1 last1, InputIt2 first2, OutputIt destination, BinaryOperation unaryFunction)</argsstring>
        <name>transform</name>
        <param>
          <type>InputIt1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIt1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIt2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>BinaryOperation</type>
          <declname>unaryFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transforms the elements of the range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last1</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first2</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the second source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unaryFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="725" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="725" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1a7cec030870d1f3b4d1c7caf26c8d907d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
        </templateparamlist>
        <type>constexpr OutputIt</type>
        <definition>constexpr OutputIt nc::stl_algorithms::unique_copy</definition>
        <argsstring>(InputIt first, InputIt last, OutputIt destination) noexcept</argsstring>
        <name>unique_copy</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies the unique elements of a range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="745" column="28" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="745" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1stl__algorithms_1aefa150cdbb6a1110c2164a3970a317a8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class BinaryPredicate</type>
          </param>
        </templateparamlist>
        <type>constexpr OutputIt</type>
        <definition>constexpr OutputIt nc::stl_algorithms::unique_copy</definition>
        <argsstring>(InputIt first, InputIt last, OutputIt destination, BinaryPredicate binaryFunction) noexcept</argsstring>
        <name>unique_copy</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>BinaryPredicate</type>
          <declname>binaryFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies the unique elements of a range</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>the last iterator of the source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the first iterator of the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binaryFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to apply to the input iterators </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OutputIt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="766" column="28" bodyfile="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" bodystart="766" bodyend="774"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Github/NumCpp/include/NumCpp/Core/Internal/StlAlgorithms.hpp" line="47" column="1"/>
  </compounddef>
</doxygen>
