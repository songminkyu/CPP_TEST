<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacenc_1_1polynomial" kind="namespace" language="C++">
    <compoundname>nc::polynomial</compoundname>
    <innerclass refid="classnc_1_1polynomial_1_1_poly1d" prot="public">nc::polynomial::Poly1d</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a0ce5634d805736db2082358497bac2f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::polynomial::chebyshev_t</definition>
        <argsstring>(uint32 n, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>chebyshev_t</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Chebyshev Polynomial of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the chebyshev polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_t.hpp" line="68" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_t.hpp" bodystart="68" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1afc70c903be3c216cf6215b76c89fecc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::chebyshev_t</definition>
        <argsstring>(uint32 n, dtype x)</argsstring>
        <name>chebyshev_t</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Chebyshev Polynomial of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the chebyshev polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_t.hpp" line="51" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_t.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1ae03d7859d449ee3fa17f2d09bb2b5638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::polynomial::chebyshev_u</definition>
        <argsstring>(uint32 n, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>chebyshev_u</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Chebyshev Polynomial of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the chebyshev polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_u.hpp" line="68" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_u.hpp" bodystart="68" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a1e0f56b8366b1f83b48e30e7bb04c937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::chebyshev_u</definition>
        <argsstring>(uint32 n, dtype x)</argsstring>
        <name>chebyshev_u</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Chebyshev Polynomial of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the chebyshev polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_u.hpp" line="51" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_u.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1ad88f67a61dad283461c6121958c5af54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::polynomial::hermite</definition>
        <argsstring>(uint32 n, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>hermite</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hermite Polynomial</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the hermite polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/hermite.hpp" line="68" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/hermite.hpp" bodystart="68" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1aeea1ebbc592a6a8c533f2230fb0f6f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::hermite</definition>
        <argsstring>(uint32 n, dtype x)</argsstring>
        <name>hermite</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hermite Polynomial</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the hermite polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/hermite.hpp" line="51" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/hermite.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a55e940d8393b196ebce707ac8b0df5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::polynomial::laguerre</definition>
        <argsstring>(uint32 n, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>laguerre</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Laguerre Polynomial</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the leguerre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/laguerre.hpp" line="86" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/laguerre.hpp" bodystart="86" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1aa2c08952d8dfd2cccfbcd6da40b49f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::laguerre</definition>
        <argsstring>(uint32 n, dtype x)</argsstring>
        <name>laguerre</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Laguerre Polynomial</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the leguerre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/laguerre.hpp" line="51" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/laguerre.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a9a3c9fb31c548094a1ce7ec927f28bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::polynomial::laguerre</definition>
        <argsstring>(uint32 n, uint32 m, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>laguerre</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Associated Laguerre Polynomial</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the leguerre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the degree of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/laguerre.hpp" line="111" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/laguerre.hpp" bodystart="111" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1ad7fef1e52b0054b5894995ee1ed94340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::laguerre</definition>
        <argsstring>(uint32 n, uint32 m, dtype x)</argsstring>
        <name>laguerre</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Associated Laguerre Polynomial</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the leguerre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the degree of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/laguerre.hpp" line="69" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/laguerre.hpp" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a4e15f397e7c9dc338e990eaf2c2f55f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::polynomial::legendre_p</definition>
        <argsstring>(int32 n, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>legendre_p</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Legendre Polynomial of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value. Requires -1 &lt;= x &lt;= 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_p.hpp" line="97" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_p.hpp" bodystart="97" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a0f49fd4ed2ad26ed5176ca69ee62013f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::legendre_p</definition>
        <argsstring>(int32 n, dtype x)</argsstring>
        <name>legendre_p</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Legendre Polynomial of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value. Requires -1 &lt;= x &lt;= 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_p.hpp" line="52" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_p.hpp" bodystart="52" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1aa17c1920f8efa35e91af667b2eaf32cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::polynomial::legendre_p</definition>
        <argsstring>(int32 n, int32 m, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>legendre_p</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Associated Legendre Polynomial of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the degree of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value. Requires -1 &lt;= x &lt;= 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_p.hpp" line="122" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_p.hpp" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a7c8f219798eea097e85877892323ca8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::legendre_p</definition>
        <argsstring>(int32 n, int32 m, dtype x)</argsstring>
        <name>legendre_p</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Associated Legendre Polynomial of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the degree of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value. Requires -1 &lt;= x &lt;= 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_p.hpp" line="75" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_p.hpp" bodystart="75" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1aed5c95f5a321ec71c1a34a42414bec52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::polynomial::legendre_q</definition>
        <argsstring>(int32 n, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>legendre_q</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Legendre Polynomial of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value. Requires -1 &lt;= x &lt;= 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_q.hpp" line="73" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_q.hpp" bodystart="73" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a78897e159974d6732b77759be2f2da13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::legendre_q</definition>
        <argsstring>(int32 n, dtype x)</argsstring>
        <name>legendre_q</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Legendre Polynomial of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the legendre polynomial </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value. Requires -1 &lt;= x &lt;= 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_q.hpp" line="51" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/legendre_q.hpp" bodystart="51" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1aa5bb22676f3f43eda1e7c0af04da376a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; nc::polynomial::spherical_harmonic</definition>
        <argsstring>(uint32 n, int32 m, dtype1 theta, dtype2 phi)</argsstring>
        <name>spherical_harmonic</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>dtype1</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value of the Spherical Harmonic Ynm(theta, phi). The spherical harmonics Ynm(theta, phi) are the angular portion of the solution to Laplace&apos;s equation in spherical coordinates where azimuthal symmetry is not present.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>order of the harmonic </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>degree of the harmonic </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>Azimuthal (longitudinal) coordinate; must be in [0, 2*pi]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar (colatitudinal) coordinate; must be in [0, pi]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/spherical_harmonic.hpp" line="57" column="22" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/spherical_harmonic.hpp" bodystart="57" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a583c30981b9547a90ad7c33edbe041c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::spherical_harmonic_i</definition>
        <argsstring>(uint32 n, int32 m, dtype1 theta, dtype2 phi)</argsstring>
        <name>spherical_harmonic_i</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>dtype1</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the imaginary part of the Spherical Harmonic Ynm(theta, phi). The spherical harmonics Ynm(theta, phi) are the angular portion of the solution to Laplace&apos;s equation in spherical coordinates where azimuthal symmetry is not present.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>order of the harmonic </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>degree of the harmonic </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>Azimuthal (longitudinal) coordinate; must be in [0, 2*pi]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar (colatitudinal) coordinate; must be in [0, pi]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/spherical_harmonic.hpp" line="103" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/spherical_harmonic.hpp" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1polynomial_1a5ed971ca59899f372f28a53913796745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nc::polynomial::spherical_harmonic_r</definition>
        <argsstring>(uint32 n, int32 m, dtype1 theta, dtype2 phi)</argsstring>
        <name>spherical_harmonic_r</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>dtype1</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the real part of the Spherical Harmonic Ynm(theta, phi). The spherical harmonics Ynm(theta, phi) are the angular portion of the solution to Laplace&apos;s equation in spherical coordinates where azimuthal symmetry is not present.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>order of the harmonic </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>degree of the harmonic </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>Azimuthal (longitudinal) coordinate; must be in [0, 2*pi]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi</parametername>
</parameternamelist>
<parameterdescription>
<para>Polar (colatitudinal) coordinate; must be in [0, pi]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/spherical_harmonic.hpp" line="80" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/spherical_harmonic.hpp" bodystart="80" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/chebyshev_t.hpp" line="40" column="1"/>
  </compounddef>
</doxygen>
