<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classnc_1_1_vec3" kind="class" language="C++" prot="public">
    <compoundname>nc::Vec3</compoundname>
    <includes refid="_vec3_8hpp" local="no">Vec3.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classnc_1_1_vec3_1a7f71dd08d58a1327739de6041e3362bb" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double nc::Vec3::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <initializer>{ 0.0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="54" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_vec3_1a969dd1c195f4c78fc3a93292391e29c1" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double nc::Vec3::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <initializer>{ 0.0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="55" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_vec3_1a0896ee691f46ce0bd669b869fe6acb41" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double nc::Vec3::z</definition>
        <argsstring></argsstring>
        <name>z</name>
        <initializer>{ 0.0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="56" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnc_1_1_vec3_1adb18c9ba29affb8b712bb22a83e38e09" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr nc::Vec3::Vec3</definition>
        <argsstring>()=default</argsstring>
        <name>Vec3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="62" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a4668419f4c870900466d4aa198247767" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::Vec3::Vec3</definition>
        <argsstring>(const NdArray&lt; double &gt; &amp;ndArray)</argsstring>
        <name>Vec3</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &amp;</type>
          <declname>ndArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="102" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="102" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a4056d1e369726710d6f1049b277486dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::Vec3::Vec3</definition>
        <argsstring>(const std::initializer_list&lt; double &gt; &amp;inList)</argsstring>
        <name>Vec3</name>
        <param>
          <type>const std::initializer_list&lt; double &gt; &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="84" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="84" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a6b0bc18cc9594a7d81361c518d543130" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr nc::Vec3::Vec3</definition>
        <argsstring>(double inX, double inY, double inZ) noexcept</argsstring>
        <name>Vec3</name>
        <param>
          <type>double</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the x component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inY</parametername>
</parameternamelist>
<parameterdescription>
<para>the y component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inZ</parametername>
</parameternamelist>
<parameterdescription>
<para>the y component </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="72" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a523ca42cbdd088851cc5a299da988cee" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::Vec3::angle</definition>
        <argsstring>(const Vec3 &amp;otherVec) const noexcept</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>otherVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the angle between the two vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>otherVec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the angle in radians </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="121" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="121" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a4f3cfcbd67a402820cc8e0576dccd2e4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>Vec3 nc::Vec3::clampMagnitude</definition>
        <argsstring>(double maxLength) const noexcept</argsstring>
        <name>clampMagnitude</name>
        <param>
          <type>double</type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the vector with its magnitude clamped to maxLength</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="152" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="152" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1af8173f6e61e9a63beae3092fd8dc4378" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>Vec3 nc::Vec3::cross</definition>
        <argsstring>(const Vec3 &amp;otherVec) const noexcept</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>otherVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the cross product of the two vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>otherVec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the dot product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="172" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="172" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a301f3edcb8cb17e7e3e5dbdd5255bdd2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::Vec3::distance</definition>
        <argsstring>(const Vec3 &amp;otherVec) const noexcept</argsstring>
        <name>distance</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>otherVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the distance between the two vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>otherVec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the distance (equivalent to (a - b).<ref refid="classnc_1_1_vec3_1a6c177e1f5c00584279a0527d3053dee8" kindref="member">norm()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="188" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1ac9f2bf549a4b800f140de060a0281a7e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::Vec3::dot</definition>
        <argsstring>(const Vec3 &amp;otherVec) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>otherVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the dot product of the two vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>otherVec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the dot product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="200" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1ab4878c8a4ebcd94fd0baf93059b50ac6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>Vec3 nc::Vec3::lerp</definition>
        <argsstring>(const Vec3 &amp;otherVec, double t) const noexcept</argsstring>
        <name>lerp</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>otherVec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Linearly interpolates between two vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>otherVec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount to interpolate by (clamped from [0, 1]); </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="246" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="246" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a6c177e1f5c00584279a0527d3053dee8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::Vec3::norm</definition>
        <argsstring>() const noexcept</argsstring>
        <name>norm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the magnitude of the vector</para>
<para><simplesect kind="return"><para>magnitude of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="265" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a6356b462b11a156b923a7c79b9747c25" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>Vec3 nc::Vec3::normalize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>normalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new normalized <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="276" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1aad142760da8d2b3493462b4542e42673" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::Vec3::operator!=</definition>
        <argsstring>(const Vec3 &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Not Equality operator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="362" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a02ec360e4ebb7b4a6b629eedf8d24a2f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
        <definition>Vec3&amp; nc::Vec3::operator*=</definition>
        <argsstring>(double scaler) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>double</type>
          <declname>scaler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar mulitplication</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scaler</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="434" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="434" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a2b1c4e63a7233fb56e2f037807dffb68" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
        <definition>Vec3&amp; nc::Vec3::operator+=</definition>
        <argsstring>(const Vec3 &amp;rhs) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the two vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="389" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="389" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1afef859d21f4332089843c5d337c1ce01" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
        <definition>Vec3&amp; nc::Vec3::operator+=</definition>
        <argsstring>(double scaler) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>double</type>
          <declname>scaler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the scaler to the vector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scaler</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="374" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="374" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a208820649ed763a5dcc9405c4aa481f2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
        <definition>Vec3&amp; nc::Vec3::operator-=</definition>
        <argsstring>(const Vec3 &amp;rhs) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the two vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="419" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="419" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a70251860269c7cb5becbe988a0b2c48e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
        <definition>Vec3&amp; nc::Vec3::operator-=</definition>
        <argsstring>(double scaler) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>double</type>
          <declname>scaler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the scaler from the vector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scaler</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="404" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="404" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a431b2ac6af51bf59d804adbe5c8a7700" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
        <definition>Vec3&amp; nc::Vec3::operator/=</definition>
        <argsstring>(double scaler) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>scaler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar division</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scaler</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="449" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="449" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a2cc63855706091881f765b63dcf52c44" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::Vec3::operator==</definition>
        <argsstring>(const Vec3 &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Equality operator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="348" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="348" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1aaba2a76701fbf17582641cefeb513f1c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>Vec3 nc::Vec3::project</definition>
        <argsstring>(const Vec3 &amp;otherVec) const noexcept</argsstring>
        <name>project</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>otherVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Projects the vector onto the input vector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>otherVec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="288" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="288" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a45dbcf0b972b41fc3bc78aac17288804" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::Vec3::toNdArray</definition>
        <argsstring>() const</argsstring>
        <name>toNdArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classnc_1_1_vec2" kindref="compound">Vec2</ref> as an <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="324" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="324" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a29fad7279d8da7f78805fee0c6d73408" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nc::Vec3::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> as a string</para>
<para><simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="311" column="21" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="311" bodyend="316"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnc_1_1_vec3_1a44e50b4b49011ec94548558600c0b17c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static constexpr Vec3 nc::Vec3::back</definition>
        <argsstring>() noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the unit vector [0, 0, -1]</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="139" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a4ea0c82948117391c6c42a99e3093f91" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static constexpr Vec3 nc::Vec3::down</definition>
        <argsstring>() noexcept</argsstring>
        <name>down</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the unit vector [0, -1, 0]</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="211" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1ac5a33c96c05a8c856b774c24f4a1965d" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static constexpr Vec3 nc::Vec3::forward</definition>
        <argsstring>() noexcept</argsstring>
        <name>forward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the unit vector [0, 0, 1]</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="222" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1a7e6730d945972ecda1815c1d41f5074c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static constexpr Vec3 nc::Vec3::left</definition>
        <argsstring>() noexcept</argsstring>
        <name>left</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the unit vector [-1, 0, 0]</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="233" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1af8862aed471260a45c7691c7c5c6b016" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static constexpr Vec3 nc::Vec3::right</definition>
        <argsstring>() noexcept</argsstring>
        <name>right</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the unit vector [1, 0, 0]</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="300" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_vec3_1aafc14ccae575994733d664eb3f4a6e66" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref></type>
        <definition>static constexpr Vec3 nc::Vec3::up</definition>
        <argsstring>() noexcept</argsstring>
        <name>up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the unit vector [0, 1, 0]</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="336" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="336" bodyend="339"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Holds a 3D vector. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nc::Vec3</label>
        <link refid="classnc_1_1_vec3"/>
      </node>
    </collaborationgraph>
    <location file="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" line="51" column="1" bodyfile="C:/Github/NumCpp/include/NumCpp/Vector/Vec3.hpp" bodystart="50" bodyend="456"/>
    <listofallmembers>
      <member refid="classnc_1_1_vec3_1a523ca42cbdd088851cc5a299da988cee" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>angle</name></member>
      <member refid="classnc_1_1_vec3_1a44e50b4b49011ec94548558600c0b17c" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>back</name></member>
      <member refid="classnc_1_1_vec3_1a4f3cfcbd67a402820cc8e0576dccd2e4" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>clampMagnitude</name></member>
      <member refid="classnc_1_1_vec3_1af8173f6e61e9a63beae3092fd8dc4378" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>cross</name></member>
      <member refid="classnc_1_1_vec3_1a301f3edcb8cb17e7e3e5dbdd5255bdd2" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>distance</name></member>
      <member refid="classnc_1_1_vec3_1ac9f2bf549a4b800f140de060a0281a7e" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>dot</name></member>
      <member refid="classnc_1_1_vec3_1a4ea0c82948117391c6c42a99e3093f91" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>down</name></member>
      <member refid="classnc_1_1_vec3_1ac5a33c96c05a8c856b774c24f4a1965d" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>forward</name></member>
      <member refid="classnc_1_1_vec3_1a7e6730d945972ecda1815c1d41f5074c" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>left</name></member>
      <member refid="classnc_1_1_vec3_1ab4878c8a4ebcd94fd0baf93059b50ac6" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>lerp</name></member>
      <member refid="classnc_1_1_vec3_1a6c177e1f5c00584279a0527d3053dee8" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>norm</name></member>
      <member refid="classnc_1_1_vec3_1a6356b462b11a156b923a7c79b9747c25" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>normalize</name></member>
      <member refid="classnc_1_1_vec3_1aad142760da8d2b3493462b4542e42673" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>operator!=</name></member>
      <member refid="classnc_1_1_vec3_1a02ec360e4ebb7b4a6b629eedf8d24a2f" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>operator*=</name></member>
      <member refid="classnc_1_1_vec3_1afef859d21f4332089843c5d337c1ce01" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>operator+=</name></member>
      <member refid="classnc_1_1_vec3_1a2b1c4e63a7233fb56e2f037807dffb68" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>operator+=</name></member>
      <member refid="classnc_1_1_vec3_1a70251860269c7cb5becbe988a0b2c48e" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>operator-=</name></member>
      <member refid="classnc_1_1_vec3_1a208820649ed763a5dcc9405c4aa481f2" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>operator-=</name></member>
      <member refid="classnc_1_1_vec3_1a431b2ac6af51bf59d804adbe5c8a7700" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>operator/=</name></member>
      <member refid="classnc_1_1_vec3_1a2cc63855706091881f765b63dcf52c44" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>operator==</name></member>
      <member refid="classnc_1_1_vec3_1aaba2a76701fbf17582641cefeb513f1c" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>project</name></member>
      <member refid="classnc_1_1_vec3_1af8862aed471260a45c7691c7c5c6b016" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>right</name></member>
      <member refid="classnc_1_1_vec3_1a45dbcf0b972b41fc3bc78aac17288804" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>toNdArray</name></member>
      <member refid="classnc_1_1_vec3_1a29fad7279d8da7f78805fee0c6d73408" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>toString</name></member>
      <member refid="classnc_1_1_vec3_1aafc14ccae575994733d664eb3f4a6e66" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>up</name></member>
      <member refid="classnc_1_1_vec3_1adb18c9ba29affb8b712bb22a83e38e09" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>Vec3</name></member>
      <member refid="classnc_1_1_vec3_1a6b0bc18cc9594a7d81361c518d543130" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>Vec3</name></member>
      <member refid="classnc_1_1_vec3_1a4056d1e369726710d6f1049b277486dd" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>Vec3</name></member>
      <member refid="classnc_1_1_vec3_1a4668419f4c870900466d4aa198247767" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>Vec3</name></member>
      <member refid="classnc_1_1_vec3_1a7f71dd08d58a1327739de6041e3362bb" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>x</name></member>
      <member refid="classnc_1_1_vec3_1a969dd1c195f4c78fc3a93292391e29c1" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>y</name></member>
      <member refid="classnc_1_1_vec3_1a0896ee691f46ce0bd669b869fe6acb41" prot="public" virt="non-virtual"><scope>nc::Vec3</scope><name>z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
