<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacenc_1_1utils" kind="namespace" language="C++">
    <compoundname>nc::utils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenc_1_1utils_1a46e88717d4d32003bb449fd5cefd401c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>constexpr dtype</type>
        <definition>constexpr dtype nc::utils::cube</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>cube</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cubes in input value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cubed value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/cube.hpp" line="45" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/cube.hpp" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a139da62fc9c51ae191e7451bb4edb706" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_integral&lt; dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::utils::essentiallyEqual</definition>
        <argsstring>(const std::complex&lt; dtype &gt; &amp;inValue1, const std::complex&lt; dtype &gt; &amp;inValue2) noexcept</argsstring>
        <name>essentiallyEqual</name>
        <param>
          <type>const std::complex&lt; dtype &gt; &amp;</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>const std::complex&lt; dtype &gt; &amp;</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tests that 2 floating point values are &quot;essentially equal&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/essentiallyEqual.hpp" line="85" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/essentiallyEqual.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a7e935ef90aaa774b37e6ab4b5316e01f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_floating_point&lt; dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::utils::essentiallyEqual</definition>
        <argsstring>(const std::complex&lt; dtype &gt; &amp;inValue1, const std::complex&lt; dtype &gt; &amp;inValue2, const std::complex&lt; dtype &gt; &amp;inEpsilon) noexcept</argsstring>
        <name>essentiallyEqual</name>
        <param>
          <type>const std::complex&lt; dtype &gt; &amp;</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>const std::complex&lt; dtype &gt; &amp;</type>
          <declname>inValue2</declname>
        </param>
        <param>
          <type>const std::complex&lt; dtype &gt; &amp;</type>
          <declname>inEpsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tests that 2 floating point values are &quot;essentially equal&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inEpsilon</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/essentiallyEqual.hpp" line="101" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/essentiallyEqual.hpp" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a963b90e7c9a3b057a924298750ddf74c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_integral&lt; dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::utils::essentiallyEqual</definition>
        <argsstring>(dtype inValue1, dtype inValue2) noexcept</argsstring>
        <name>essentiallyEqual</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tests that 2 floating point values are &quot;essentially equal&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/essentiallyEqual.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/essentiallyEqual.hpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1aedd8afd691cf9f5a8f8e12c9ca33743a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_floating_point&lt; dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nc::utils::essentiallyEqual</definition>
        <argsstring>(dtype inValue1, dtype inValue2, dtype inEpsilon) noexcept</argsstring>
        <name>essentiallyEqual</name>
        <param>
          <type>dtype</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue2</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inEpsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tests that 2 floating point values are &quot;essentially equal&quot;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inEpsilon</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/essentiallyEqual.hpp" line="69" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/essentiallyEqual.hpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a5016e06ac7ca186ff6c110b314d30209" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::utils::gaussian</definition>
        <argsstring>(double inX, double inY, double inSigma) noexcept</argsstring>
        <name>gaussian</name>
        <param>
          <type>double</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inSigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>samples a 2D gaussian of mean zero and input STD sigma</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inY</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSigma</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/gaussian.hpp" line="49" column="23" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/gaussian.hpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a263704ee2cc6ab3f77b462522c7150f8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::utils::gaussian1d</definition>
        <argsstring>(double inX, double inMu, double inSigma) noexcept</argsstring>
        <name>gaussian1d</name>
        <param>
          <type>double</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inMu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inSigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>samples a 1D gaussian of input mean and sigma</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMu</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSigma</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/gaussian1d.hpp" line="49" column="23" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/gaussian1d.hpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a691a52cfcc401340af355bd53869600e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double nc::utils::interp</definition>
        <argsstring>(double inValue1, double inValue2, double inPercent) noexcept</argsstring>
        <name>interp</name>
        <param>
          <type>double</type>
          <declname>inValue1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inValue2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inPercent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the linear interpolation between two points</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPercent</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>linear interpolated point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/interp.hpp" line="44" column="26" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/interp.hpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a16a6ad93c420ed7a003d9921bee1a7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nc::utils::num2str</definition>
        <argsstring>(dtype inNumber)</argsstring>
        <name>num2str</name>
        <param>
          <type>dtype</type>
          <declname>inNumber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts the number into a string</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumber</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/num2str.hpp" line="47" column="21" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/num2str.hpp" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a716a63ef8627c73f6cc4146481fcabdf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::utils::power</definition>
        <argsstring>(dtype inValue, uint8 inPower) noexcept</argsstring>
        <name>power</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9ba5a0aa26753a185985b8273fb9062d" kindref="member">uint8</ref></type>
          <declname>inPower</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises the input value to an integer power</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPower</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>inValue raised to inPower </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/power.hpp" line="49" column="15" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/power.hpp" bodystart="49" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1ac113b30b96f9c707c0cbe2eecbabe85f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::utils::powerf</definition>
        <argsstring>(dtype1 inValue, const dtype2 inPower) noexcept</argsstring>
        <name>powerf</name>
        <param>
          <type>dtype1</type>
          <declname>inValue</declname>
        </param>
        <param>
          <type>const dtype2</type>
          <declname>inPower</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raises the input value to a floating point power</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPower</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>inValue raised to inPower </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/powerf.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/powerf.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1ae792e10a24b7e5b8291a6c31a28a4512" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>constexpr dtype</type>
        <definition>constexpr dtype nc::utils::sqr</definition>
        <argsstring>(dtype inValue) noexcept</argsstring>
        <name>sqr</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Squares in input value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>squared value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/sqr.hpp" line="45" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/sqr.hpp" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1utils_1a83530b13c9cc3b01b9bd8b8d3113290a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nc::utils::value2str</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>value2str</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts the value into a string</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Utils/value2str.hpp" line="49" column="21" bodyfile="C:/Github/NumCpp/include/NumCpp/Utils/value2str.hpp" bodystart="49" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Github/NumCpp/include/NumCpp/Utils/cube.hpp" line="36" column="1"/>
  </compounddef>
</doxygen>
