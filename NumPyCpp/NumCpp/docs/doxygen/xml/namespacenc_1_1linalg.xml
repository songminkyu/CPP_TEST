<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacenc_1_1linalg" kind="namespace" language="C++">
    <compoundname>nc::linalg</compoundname>
    <innerclass refid="classnc_1_1linalg_1_1_s_v_d" prot="public">nc::linalg::SVD</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenc_1_1linalg_1ac2d27e58dd0f082ef5a422d545699d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::linalg::cholesky</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inMatrix)</argsstring>
        <name>cholesky</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>matrix cholesky decomposition A = L * <ref refid="namespacenc_1aa6c78ac10e4c3aa446716f80aa1a72ca" kindref="member">L.transpose()</ref></para>
<para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky">https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> to be decomposed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> of the decomposed L matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/cholesky.hpp" line="55" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/cholesky.hpp" bodystart="55" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1a55bafcebbc897458164e8dc511b6119c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>dtype</type>
        <definition>dtype nc::linalg::det</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>det</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>matrix determinant. NOTE: can get verrrrry slow for large matrices (order &gt; 10)</para>
<para>SciPy Reference: <ulink url="https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.det.html#scipy.linalg.det">https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.det.html#scipy.linalg.det</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix determinant </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/det.hpp" line="57" column="15" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/det.hpp" bodystart="57" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1aff0f97e94666284100b584e13d27def3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">nc::enable_if_t</ref>&lt; is_arithmetic_v&lt; dtype &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">nc::enable_if_t</ref>&lt; all_arithmetic_v&lt; Params... &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">nc::enable_if_t</ref>&lt; all_same_v&lt; dtype, Params... &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;, double &gt;</type>
        <definition>std::pair&lt;NdArray&lt;double&gt;, double&gt; nc::linalg::gaussNewtonNlls</definition>
        <argsstring>(const uint32 numIterations, const NdArray&lt; dtype &gt; &amp;coordinates, const NdArray&lt; dtype &gt; &amp;measurements, const std::function&lt; dtype(const NdArray&lt; dtype &gt; &amp;, const NdArray&lt; dtype &gt; &amp;)&gt; &amp;function, const std::array&lt; std::function&lt; dtype(const NdArray&lt; dtype &gt; &amp;, const NdArray&lt; dtype &gt; &amp;)&gt;, sizeof...(Params)&gt; &amp;derivatives, Params... initialGuess)</argsstring>
        <name>gaussNewtonNlls</name>
        <param>
          <type>const <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>numIterations</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>coordinates</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>measurements</declname>
        </param>
        <param>
          <type>const std::function&lt; dtype(const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;, const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;)&gt; &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const std::array&lt; std::function&lt; dtype(const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;, const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;)&gt;</type>
        </param>
        <param>
          <type>sizeof...</type>
          <array>Params</array>
        </param>
        <param>
          <type>&amp;</type>
          <declname>derivatives</declname>
        </param>
        <param>
          <type>Params...</type>
          <declname>initialGuess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Gaussï¿½Newton algorithm is used to solve non-linear least squares problems. It is a modification of Newton&apos;s method for finding a minimum of a function. <ulink url="https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm">https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of iterations to perform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coordinates</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinate values. The shape needs to be [n x d], where d is the number of diminsions of the fit function (f(x) is one dimensional, f(x, y) is two dimensions, etc), and n is the number of observations that are being fit to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>measurements</parametername>
</parameternamelist>
<parameterdescription>
<para>the measured values that are being fit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>a std::function of the function that is being fit. The function takes as inputs an <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> of a single set of the coordinate values, and an <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> of the current values of the fit parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>derivatives</parametername>
</parameternamelist>
<parameterdescription>
<para>array of std::functions to calculate the function derivatives. The function that is being fit. The function takes as inputs an <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> of a single set of the coordinate values, and an <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> of the current values of the fit parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialGuess</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial guess of the parameters to be solved for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair of <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> of solved parameter values, and rms of the residuals value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/gaussNewtonNlls.hpp" line="79" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/gaussNewtonNlls.hpp" bodystart="79" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1ae7ced3680f1ae95af4bc2e6b98a5a517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::linalg::hat</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inVec)</argsstring>
        <name>hat</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>vector hat operator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inVec</parametername>
</parameternamelist>
<parameterdescription>
<para>(3x1, or 1x3 cartesian vector) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>3x3 <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/hat.hpp" line="81" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/hat.hpp" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1ae9cdb091717a1c74dc659519d77e0048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::linalg::hat</definition>
        <argsstring>(const Vec3 &amp;inVec)</argsstring>
        <name>hat</name>
        <param>
          <type>const <ref refid="classnc_1_1_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>inVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>vector hat operator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inVec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>3x3 <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/hat.hpp" line="102" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/hat.hpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1a12e16cb9d1a7b09e85b4abbef14ba2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::linalg::hat</definition>
        <argsstring>(dtype inX, dtype inY, dtype inZ)</argsstring>
        <name>hat</name>
        <param>
          <type>dtype</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>vector hat operator</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inY</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inZ</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>3x3 <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/hat.hpp" line="53" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/hat.hpp" bodystart="53" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1ae36553eb100d8f2c2167e8ecadf2a9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::linalg::inv</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>inv</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>matrix inverse</para>
<para>SciPy Reference: <ulink url="https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.inv.html#scipy.linalg.inv">https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.inv.html#scipy.linalg.inv</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/inv.hpp" line="55" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/inv.hpp" bodystart="55" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1a9c15421c77e6b4b12fca1515596d1414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::linalg::lstsq</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inA, const NdArray&lt; dtype &gt; &amp;inB, double inTolerance=1e-12)</argsstring>
        <name>lstsq</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inA</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inB</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inTolerance</declname>
          <defval>1e-12</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Solves the equation a x = b by computing a vector x that minimizes the Euclidean 2-norm || b - a x ||^2. The equation may be under-, well-, or over- determined (i.e., the number of linearly independent rows of a can be less than, equal to, or greater than its number of linearly independent columns). If a is square and of full rank, then x (but for round-off error) is the &quot;exact&quot; solution of the equation.</para>
<para>SciPy Reference: <ulink url="https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lstsq.html#scipy.linalg.lstsq">https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lstsq.html#scipy.linalg.lstsq</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inA</parametername>
</parameternamelist>
<parameterdescription>
<para>coefficient matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inB</parametername>
</parameternamelist>
<parameterdescription>
<para>Ordinate or &quot;dependent variable&quot; values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1e-12)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/lstsq.hpp" line="60" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/lstsq.hpp" bodystart="60" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1a153a90dbcc2ca94c664c429868d15bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;, <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &gt;</type>
        <definition>std::pair&lt;NdArray&lt;double&gt;, NdArray&lt;double&gt; &gt; nc::linalg::lu_decomposition</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inMatrix)</argsstring>
        <name>lu_decomposition</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>matrix LU decomposition A = LU</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> to be decomposed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair&lt;NdArray, NdArray&gt; of the decomposed L and U matrices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/lu_decomposition.hpp" line="58" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/lu_decomposition.hpp" bodystart="58" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1ad27c1996e4e27a6f8ba5d2aed0743bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::linalg::matrix_power</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, int16 inPower)</argsstring>
        <name>matrix_power</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a8f5045ed0f0a08d87fd76d7a74ac128d" kindref="member">int16</ref></type>
          <declname>inPower</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise a square matrix to the (integer) power n.</para>
<para>For positive integers n, the power is computed by repeated matrix squarings and matrix multiplications. If n == 0, the identity matrix of the same shape as M is returned. If n &lt; 0, the inverse is computed and then raised to the abs(n).</para>
<para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.matrix_power.html#numpy.linalg.matrix_power">https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.matrix_power.html#numpy.linalg.matrix_power</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPower</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/matrix_power.hpp" line="63" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/matrix_power.hpp" bodystart="63" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1a86ab79e41b748e7ea0ee4f2e0bc462a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::linalg::multi_dot</definition>
        <argsstring>(const std::initializer_list&lt; NdArray&lt; dtype &gt; &gt; &amp;inList)</argsstring>
        <name>multi_dot</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &gt; &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the dot product of two or more arrays in a single function call.</para>
<para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.multi_dot.html#numpy.linalg.multi_dot">https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.multi_dot.html#numpy.linalg.multi_dot</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of arrays</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/multi_dot.hpp" line="57" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/multi_dot.hpp" bodystart="57" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1a390c3d32ed4b8ed7e718cbe121025ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;, <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;, <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &gt;</type>
        <definition>std::tuple&lt;NdArray&lt;double&gt;, NdArray&lt;double&gt;, NdArray&lt;double&gt; &gt; nc::linalg::pivotLU_decomposition</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inMatrix)</argsstring>
        <name>pivotLU_decomposition</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>matrix pivot LU decomposition PA = LU</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> to be decomposed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;NdArray, NdArray, NdArray&gt; of the decomposed L, U, and P matrices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/pivotLU_decomposition.hpp" line="59" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/pivotLU_decomposition.hpp" bodystart="59" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1linalg_1acb38ad2613d50422afc539d005159055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nc::linalg::svd</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, NdArray&lt; double &gt; &amp;outU, NdArray&lt; double &gt; &amp;outS, NdArray&lt; double &gt; &amp;outVt)</argsstring>
        <name>svd</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &amp;</type>
          <declname>outU</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &amp;</type>
          <declname>outS</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt; &amp;</type>
          <declname>outVt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>matrix svd</para>
<para>NumPy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.svd.html#numpy.linalg.svd">https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.svd.html#numpy.linalg.svd</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> to be SVDed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outU</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> output U </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outS</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> output S </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outVt</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> output V transpose </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Linalg/svd.hpp" line="54" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Linalg/svd.hpp" bodystart="54" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Github/NumCpp/include/NumCpp/Linalg/cholesky.hpp" line="43" column="1"/>
  </compounddef>
</doxygen>
