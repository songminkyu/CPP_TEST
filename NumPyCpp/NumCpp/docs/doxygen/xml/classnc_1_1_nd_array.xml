<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classnc_1_1_nd_array" kind="class" language="C++" prot="public">
    <compoundname>nc::NdArray</compoundname>
    <includes refid="_nd_array_core_8hpp" local="no">NdArrayCore.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename dtype</type>
      </param>
      <param>
        <type>class Allocator</type>
        <defval>std::allocator&lt;dtype&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a2fd1d5a43a493e51af456ae515c689af" prot="private" static="no">
        <type>std::allocator_traits&lt; AllocType &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::AllocTraits =  std::allocator_traits&lt;AllocType&gt;</definition>
        <argsstring></argsstring>
        <name>AllocTraits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="82" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a43461990766ccd8ce47c93d37501ec0f" prot="private" static="no">
        <type>typename std::allocator_traits&lt; Allocator &gt;::template rebind_alloc&lt; dtype &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::AllocType =  typename std::allocator_traits&lt;Allocator&gt;::template rebind_alloc&lt;dtype&gt;</definition>
        <argsstring></argsstring>
        <name>AllocType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="81" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a86488494684f55c32dd82e90b818f77e" prot="public" static="no">
        <type>Allocator</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::allocator_type =  Allocator</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="86" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a379e1e1ed2a61de6aa44226679620d47" prot="public" static="no">
        <type><ref refid="classnc_1_1_nd_array_column_iterator" kindref="compound">NdArrayColumnIterator</ref>&lt; dtype, <ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref>, <ref refid="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" kindref="member">pointer</ref>, <ref refid="classnc_1_1_nd_array_1a612cdd532e56b711ebb9c2478971c04f" kindref="member">difference_type</ref> &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::column_iterator =  NdArrayColumnIterator&lt;dtype, size_type, pointer, difference_type&gt;</definition>
        <argsstring></argsstring>
        <name>column_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="99" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" prot="public" static="no">
        <type><ref refid="classnc_1_1_nd_array_const_column_iterator" kindref="compound">NdArrayConstColumnIterator</ref>&lt; dtype, <ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref>, <ref refid="classnc_1_1_nd_array_1a94982f81d8aa8c8a72abe0327f22b4dd" kindref="member">const_pointer</ref>, <ref refid="classnc_1_1_nd_array_1a612cdd532e56b711ebb9c2478971c04f" kindref="member">difference_type</ref> &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::const_column_iterator =  NdArrayConstColumnIterator&lt;dtype, size_type, const_pointer, difference_type&gt;</definition>
        <argsstring></argsstring>
        <name>const_column_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="100" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" prot="public" static="no">
        <type><ref refid="classnc_1_1_nd_array_const_iterator" kindref="compound">NdArrayConstIterator</ref>&lt; dtype, <ref refid="classnc_1_1_nd_array_1a94982f81d8aa8c8a72abe0327f22b4dd" kindref="member">const_pointer</ref>, <ref refid="classnc_1_1_nd_array_1a612cdd532e56b711ebb9c2478971c04f" kindref="member">difference_type</ref> &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::const_iterator =  NdArrayConstIterator&lt;dtype, const_pointer, difference_type&gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="95" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a94982f81d8aa8c8a72abe0327f22b4dd" prot="public" static="no">
        <type>typename AllocTraits::const_pointer</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::const_pointer =  typename AllocTraits::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="88" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a2e9001eb3a7fb5b44f6400b3cc3b3222" prot="public" static="no">
        <type>const dtype &amp;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::const_reference =  const dtype&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="90" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref> &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::const_reverse_column_iterator =  std::reverse_iterator&lt;const_column_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_column_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="102" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref> &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::const_reverse_iterator =  std::reverse_iterator&lt;const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="97" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a612cdd532e56b711ebb9c2478971c04f" prot="public" static="no">
        <type>typename AllocTraits::difference_type</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::difference_type =  typename AllocTraits::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="92" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a33ce0c581a22e809cfc5a79a534bf798" prot="public" static="no">
        <type><ref refid="classnc_1_1_nd_array_iterator" kindref="compound">NdArrayIterator</ref>&lt; dtype, <ref refid="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" kindref="member">pointer</ref>, <ref refid="classnc_1_1_nd_array_1a612cdd532e56b711ebb9c2478971c04f" kindref="member">difference_type</ref> &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::iterator =  NdArrayIterator&lt;dtype, pointer, difference_type&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="94" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" prot="public" static="no">
        <type>typename AllocTraits::pointer</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::pointer =  typename AllocTraits::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="87" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" prot="public" static="no">
        <type>dtype &amp;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::reference =  dtype&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="89" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1abc1bc6a854968940dac643396b2fb1b5" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classnc_1_1_nd_array_1a379e1e1ed2a61de6aa44226679620d47" kindref="member">column_iterator</ref> &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::reverse_column_iterator =  std::reverse_iterator&lt;column_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_column_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="101" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1a9987ced72f8182d4b55807c0177eab11" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classnc_1_1_nd_array_1a33ce0c581a22e809cfc5a79a534bf798" kindref="member">iterator</ref> &gt;</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::reverse_iterator =  std::reverse_iterator&lt;iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="96" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" prot="public" static="no">
        <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::size_type =  uint32</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="91" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" prot="public" static="no">
        <type>dtype</type>
        <definition>using nc::NdArray&lt; dtype, Allocator &gt;::value_type =  dtype</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="85" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a3332543f83df7836554bc121270add64" prot="private" static="no" mutable="no">
        <type><ref refid="classnc_1_1_nd_array_1a86488494684f55c32dd82e90b818f77e" kindref="member">allocator_type</ref></type>
        <definition>allocator_type nc::NdArray&lt; dtype, Allocator &gt;::allocator_</definition>
        <argsstring></argsstring>
        <name>allocator_</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4636" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a50d403e680414c715c5d0fb844725afc" prot="private" static="no" mutable="no">
        <type><ref refid="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" kindref="member">pointer</ref></type>
        <definition>pointer nc::NdArray&lt; dtype, Allocator &gt;::array_</definition>
        <argsstring></argsstring>
        <name>array_</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4640" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1ab368d4fa752a97f987dc4677c4756b37" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
        <definition>Endian nc::NdArray&lt; dtype, Allocator &gt;::endianess_</definition>
        <argsstring></argsstring>
        <name>endianess_</name>
        <initializer>{ <ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152af78504d96ba7177dc0c6784905ac8743" kindref="member">Endian::NATIVE</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4639" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a5e31756835105267e51e573eb67d4d77" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nc::NdArray&lt; dtype, Allocator &gt;::ownsPtr_</definition>
        <argsstring></argsstring>
        <name>ownsPtr_</name>
        <initializer>{ false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4641" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a0119c45e6deefda84d29c88eb123bf23" prot="private" static="no" mutable="no">
        <type><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref></type>
        <definition>Shape nc::NdArray&lt; dtype, Allocator &gt;::shape_</definition>
        <argsstring></argsstring>
        <name>shape_</name>
        <initializer>{ 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4637" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1_nd_array_1a1c6ce5e12d3d6fc8fc1c08dd756a7133" prot="private" static="no" mutable="no">
        <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
        <definition>size_type nc::NdArray&lt; dtype, Allocator &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4638" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4638" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae7a67ddaaff2e98786867814e6a1016c" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype, Allocator &gt;::deleteArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>deleteArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes the internal array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4647" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4647" bodyend="4659"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab3a36907429e26ac1ba65622af27914c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype, Allocator &gt;::newArray</definition>
        <argsstring>()</argsstring>
        <name>newArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new internal array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4665" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4665" bodyend="4672"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a605c3eb54c62f43a462242bacbb34d11" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype, Allocator &gt;::newArray</definition>
        <argsstring>(const Shape &amp;inShape)</argsstring>
        <name>newArray</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new internal array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4681" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4681" bodyend="4688"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9363d9a2ed992a07c11d07b62b1f237f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::STATIC_ASSERT_VALID_DTYPE</definition>
        <argsstring>(dtype)</argsstring>
        <name>STATIC_ASSERT_VALID_DTYPE</name>
        <param>
          <type>dtype</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="78" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7b46bea4f56ab2327fc291dac4e75788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>()=default</argsstring>
        <name>NdArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defualt Constructor, not very usefull... </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="108" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae04a364f503fe72c06d2f7cd78e712d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="523" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="523" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1af8cd2e1b7214c4b8b8b784e1b5265c11" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const Shape &amp;inShape)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="145" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="145" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad94cfcf69d664d94e81fc98a0a61d193" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacenc_1aae4eab83016ec7dcaa7d78b6d1e78481" kindref="member">is_valid_dtype_v</ref>&lt; dtype &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const std::deque&lt; dtype &gt; &amp;inDeque)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::deque&lt; dtype &gt; &amp;</type>
          <declname>inDeque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inDeque</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="357" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="357" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a567a45c944672939e89fa507236d1158" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const std::deque&lt; std::deque&lt; dtype &gt;&gt; &amp;in2dDeque)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::deque&lt; std::deque&lt; dtype &gt;&gt; &amp;</type>
          <declname>in2dDeque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in2dDeque</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="374" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="374" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9b5658aaaff185187c964a6bf3f4f5a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const std::initializer_list&lt; dtype &gt; &amp;inList)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::initializer_list&lt; dtype &gt; &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="159" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="159" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1877502ba79a59c3a9b144e6111def1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; dtype &gt; &gt; &amp;inList)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; dtype &gt; &gt; &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para>2D initializer list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="177" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="177" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7b0f43ea1853dcc471949c0e7eb977f5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const std::list&lt; dtype &gt; &amp;inList)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::list&lt; dtype &gt; &amp;</type>
          <declname>inList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inList</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="407" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="407" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9d7045ecdff86bac3306a8bfd9a787eb" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; dtype &gt;&gt; &amp;in2dVector)</argsstring>
        <name>NdArray</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; dtype &gt;&gt; &amp;</type>
          <declname>in2dVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in2dVector</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="295" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="295" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad8160a6009ce9c0c8bbb384261ce18bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const_pointer inPtr, size_type size)</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1a94982f81d8aa8c8a72abe0327f22b4dd" kindref="member">const_pointer</ref></type>
          <declname>inPtr</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. Copies the contents of the buffer into the array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>const_pointer to beginning of buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="446" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="446" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a42c487740a599fc7906acbeea2fa766d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(const_pointer inPtr, uint32 numRows, uint32 numCols)</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1a94982f81d8aa8c8a72abe0327f22b4dd" kindref="member">const_pointer</ref></type>
          <declname>inPtr</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>numRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>numCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. Copies the contents of the buffer into the array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>const_pointer to beginning of buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numRows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numCols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of cols of the buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="466" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="466" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a46c4fbd999ab1d612586191a15ada4b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same&lt; typename std::iterator_traits&lt; Iterator &gt;::<ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref>, dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(Iterator inFirst, Iterator inLast)</argsstring>
        <name>NdArray</name>
        <param>
          <type>Iterator</type>
          <declname>inFirst</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>inLast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFirst</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inLast</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="427" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="427" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa6bf0b18b1ebb54b2a1fd4e4b33253dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;&amp;inOtherArray) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;&amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="542" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="542" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aee44fee3e2c882d490898c082db39449" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Bool</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same&lt; Bool, bool &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(pointer inPtr, size_type size, Bool takeOwnership) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" kindref="member">pointer</ref></type>
          <declname>inPtr</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>Bool</type>
          <declname>takeOwnership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. Operates as a shell around an already existing array of data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to beginning of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>takeOwnership</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to take ownership of the data and call delete[] in the destructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="489" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="489" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7fcb1cf40a8402e8ba6353e58eed8dbd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Bool</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same&lt; Bool, bool &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(pointer inPtr, uint32 numRows, uint32 numCols, Bool takeOwnership) noexcept</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" kindref="member">pointer</ref></type>
          <declname>inPtr</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>numRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>numCols</declname>
        </param>
        <param>
          <type>Bool</type>
          <declname>takeOwnership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. Operates as a shell around an already existing array of data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to beginning of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numRows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numCols</parametername>
</parameternamelist>
<parameterdescription>
<para>the nubmer of column in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>takeOwnership</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to take ownership of the data and call delete[] in the destructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="509" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="509" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a8509cda74ae6f29995dd8a9f27d30d11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(size_type inNumRows, size_type inNumCols)</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="131" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a91801907e76fd8ecc9ce7ff3b85ea9bd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(size_type inSquareSize)</argsstring>
        <name>NdArray</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inSquareSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSquareSize</parametername>
</parameternamelist>
<parameterdescription>
<para>square number of rows and columns </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="117" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad724d08ab913c125a38bc528e68cad8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>ArraySize</declname>
            <defname>ArraySize</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacenc_1aae4eab83016ec7dcaa7d78b6d1e78481" kindref="member">is_valid_dtype_v</ref>&lt; dtype &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(std::array&lt; dtype, ArraySize &gt; &amp;inArray, bool copy=true)</argsstring>
        <name>NdArray</name>
        <param>
          <type>std::array&lt; dtype, ArraySize &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) boolean for whether to make a copy and own the data, or act as a non-owning shell. Default true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="213" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="213" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad9ccdeb2572f239a33ca5fbb473b513a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Dim0Size</declname>
            <defname>Dim0Size</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>Dim1Size</declname>
            <defname>Dim1Size</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(std::array&lt; std::array&lt; dtype, Dim1Size &gt;, Dim0Size &gt; &amp;in2dArray, bool copy=true)</argsstring>
        <name>NdArray</name>
        <param>
          <type>std::array&lt; std::array&lt; dtype, Dim1Size &gt;, Dim0Size &gt; &amp;</type>
          <declname>in2dArray</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in2dArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) boolean for whether to make a copy and own the data, or act as a non-owning shell. Default true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="241" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="241" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1847487093139deb6a541cfaa43c3d90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacenc_1aae4eab83016ec7dcaa7d78b6d1e78481" kindref="member">is_valid_dtype_v</ref>&lt; dtype &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(std::vector&lt; dtype &gt; &amp;inVector, bool copy=true)</argsstring>
        <name>NdArray</name>
        <param>
          <type>std::vector&lt; dtype &gt; &amp;</type>
          <declname>inVector</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inVector</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) boolean for whether to make a copy and own the data, or act as a non-owning shell. Default true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="270" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="270" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a00cddf06371547d613388cefeece2cc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Dim1Size</declname>
            <defname>Dim1Size</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::NdArray</definition>
        <argsstring>(std::vector&lt; std::array&lt; dtype, Dim1Size &gt;&gt; &amp;in2dArray, bool copy=true)</argsstring>
        <name>NdArray</name>
        <param>
          <type>std::vector&lt; std::array&lt; dtype, Dim1Size &gt;&gt; &amp;</type>
          <declname>in2dArray</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in2dArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) boolean for whether to make a copy and own the data, or act as a non-owning shell. Default true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="330" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="330" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7ef259d6b54cf8373721700b12c14500" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>nc::NdArray&lt; dtype, Allocator &gt;::~NdArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>~NdArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="559" column="9" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="559" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1afaba38e055338400eb8a404dfda573d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype, Allocator &gt;::all</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>all</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if all elements evaluate to True or non zero</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.all.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.all.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1784" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1784" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1463c8f1cb95cb8546d02502d86bd91e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype, Allocator &gt;::any</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>any</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if any elements evaluate to True or non zero</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.any.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.any.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1840" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1840" bodyend="1883"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad4a41193c4f364a817f51ac7f6932b1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::NdArray&lt; dtype, Allocator &gt;::argmax</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>argmax</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return indices of the maximum values along the given axis. Only the first index is returned.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argmax.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argmax.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1897" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1897" bodyend="1943"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a62a38761f6f8fd005e225a5d3328e073" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::NdArray&lt; dtype, Allocator &gt;::argmin</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>argmin</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return indices of the minimum values along the given axis. Only the first index is returned.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argmin.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argmin.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1957" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1957" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae0ec4abb78faecc68f8d7e2198894196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::NdArray&lt; dtype, Allocator &gt;::argsort</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>argsort</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the indices that would sort this array.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argsort.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.argsort.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2016" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2016" bodyend="2086"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a028372744b6c41150c339088b1d1a0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtypeOut</type>
          </param>
          <param>
            <type>typename dtype_</type>
            <defval>dtype</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; dtype_, dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; std::is_arithmetic&lt; dtype_ &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; std::is_arithmetic&lt; dtypeOut &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtypeOut &gt;</type>
        <definition>NdArray&lt;dtypeOut&gt; nc::NdArray&lt; dtype, Allocator &gt;::astype</definition>
        <argsstring>() const</argsstring>
        <name>astype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array, cast to a specified type. Arithmetic to Arithmetic</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2102" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2102" bodyend="2121"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a028372744b6c41150c339088b1d1a0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtypeOut</type>
          </param>
          <param>
            <type>typename dtype_</type>
            <defval>dtype</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; dtype_, dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; std::is_arithmetic&lt; dtype_ &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; <ref refid="namespacenc_1af8be3598b0e2894429842d64d3ce4050" kindref="member">is_complex_v</ref>&lt; dtypeOut &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtypeOut &gt;</type>
        <definition>NdArray&lt;dtypeOut&gt; nc::NdArray&lt; dtype, Allocator &gt;::astype</definition>
        <argsstring>() const</argsstring>
        <name>astype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array, cast to a specified type. Arithmetic to Complex</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2137" column="21" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2137" bodyend="2149"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a028372744b6c41150c339088b1d1a0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtypeOut</type>
          </param>
          <param>
            <type>typename dtype_</type>
            <defval>dtype</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; dtype_, dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; <ref refid="namespacenc_1af8be3598b0e2894429842d64d3ce4050" kindref="member">is_complex_v</ref>&lt; dtype_ &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; <ref refid="namespacenc_1af8be3598b0e2894429842d64d3ce4050" kindref="member">is_complex_v</ref>&lt; dtypeOut &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtypeOut &gt;</type>
        <definition>NdArray&lt;dtypeOut&gt; nc::NdArray&lt; dtype, Allocator &gt;::astype</definition>
        <argsstring>() const</argsstring>
        <name>astype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array, cast to a specified type. Complex to Complex</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2165" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2165" bodyend="2184"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a028372744b6c41150c339088b1d1a0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtypeOut</type>
          </param>
          <param>
            <type>typename dtype_</type>
            <defval>dtype</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; std::is_same&lt; dtype_, dtype &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; <ref refid="namespacenc_1af8be3598b0e2894429842d64d3ce4050" kindref="member">is_complex_v</ref>&lt; dtype_ &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type><ref refid="namespacenc_1ae6f8d4a50bd2b4254f00085e7f17ce01" kindref="member">enable_if_t</ref>&lt; std::is_arithmetic&lt; dtypeOut &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtypeOut &gt;</type>
        <definition>NdArray&lt;dtypeOut&gt; nc::NdArray&lt; dtype, Allocator &gt;::astype</definition>
        <argsstring>() const</argsstring>
        <name>astype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array, cast to a specified type. Complex to Arithmetic</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.astype.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2200" column="21" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2200" bodyend="2212"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1adf7b073b906cd66e1c8a78df865b5679" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::at</definition>
        <argsstring>(const Slice &amp;inRowSlice, const Slice &amp;inColSlice) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access method with bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ndarray </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1046" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1046" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1537e603e458ad93bdde061e476305d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::at</definition>
        <argsstring>(const Slice &amp;inRowSlice, int32 inColIndex) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access method with bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ndarray </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1062" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1062" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a39dc0db6c17edef6642b55b4ce68df48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::at</definition>
        <argsstring>(const Slice &amp;inSlice) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 1D access method with bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ndarray </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1030" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1030" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a3ae4c372620db7cf0211867dcb886b48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" kindref="member">reference</ref></type>
        <definition>reference nc::NdArray&lt; dtype, Allocator &gt;::at</definition>
        <argsstring>(int32 inIndex)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>1D access method with bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="920" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="920" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a10ef25d07c5761028091cda2c7f20d1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a2e9001eb3a7fb5b44f6400b3cc3b3222" kindref="member">const_reference</ref></type>
        <definition>const_reference nc::NdArray&lt; dtype, Allocator &gt;::at</definition>
        <argsstring>(int32 inIndex) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 1D access method with bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="943" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="943" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7b5c383337c887ddf537708b29b64afd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::at</definition>
        <argsstring>(int32 inRowIndex, const Slice &amp;inColSlice) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access method with bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ndarray </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1078" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1078" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ade8b486f8c2ffce283abea6126cb3a63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" kindref="member">reference</ref></type>
        <definition>reference nc::NdArray&lt; dtype, Allocator &gt;::at</definition>
        <argsstring>(int32 inRowIndex, int32 inColIndex)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D access method with bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="966" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="966" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a77807cb1488da10f8654dc6331426ca6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a2e9001eb3a7fb5b44f6400b3cc3b3222" kindref="member">const_reference</ref></type>
        <definition>const_reference nc::NdArray&lt; dtype, Allocator &gt;::at</definition>
        <argsstring>(int32 inRowIndex, int32 inColIndex) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access method with bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="998" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="998" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a897e7f07e899fa478616c6cfdf40ab24" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
        <definition>value_type nc::NdArray&lt; dtype, Allocator &gt;::back</definition>
        <argsstring>() const noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the last element of the flattened array.</para>
<para><simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2221" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2221" bodyend="2224"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a555efdc758b47b107c9c94593b6c2470" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" kindref="member">reference</ref></type>
        <definition>reference nc::NdArray&lt; dtype, Allocator &gt;::back</definition>
        <argsstring>() noexcept</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference the last element of the flattened array.</para>
<para><simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2233" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2233" bodyend="2236"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a20fb268d9bd6c25dd70b6772f5ff5b89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" kindref="member">reference</ref></type>
        <definition>reference nc::NdArray&lt; dtype, Allocator &gt;::back</definition>
        <argsstring>(size_type row)</argsstring>
        <name>back</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference the last element of the input row.</para>
<para><simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2257" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2257" bodyend="2260"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1addb7c0fee95cf2fa9a05cad2d67cf099" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
        <definition>value_type nc::NdArray&lt; dtype, Allocator &gt;::back</definition>
        <argsstring>(size_type row) const</argsstring>
        <name>back</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the last element of the input row.</para>
<para><simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2245" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2245" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae47b79d2054d83dc0c7deb617ab7d1c2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype, Allocator &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the flattened array <simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1121" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1121" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab57282e02905eeb2a932eeb73983221f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a33ce0c581a22e809cfc5a79a534bf798" kindref="member">iterator</ref></type>
        <definition>iterator nc::NdArray&lt; dtype, Allocator &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>iterator to the beginning of the flattened array <simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1091" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1091" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a57fa866d30c298337bfc906ae73b6a40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a33ce0c581a22e809cfc5a79a534bf798" kindref="member">iterator</ref></type>
        <definition>iterator nc::NdArray&lt; dtype, Allocator &gt;::begin</definition>
        <argsstring>(size_type inRow)</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>iterator to the beginning of the input row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1105" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1105" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab3cdc446e55744b31d42dfb53fcdc7cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype, Allocator &gt;::begin</definition>
        <argsstring>(size_type inRow) const</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the input row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1135" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1135" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5798774fe863c25277b4a3fa2c8f0326" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::byteswap</definition>
        <argsstring>()</argsstring>
        <name>byteswap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap the bytes of the array elements in place</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.byteswap.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.byteswap.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2271" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2271" bodyend="2299"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0bee49339bdc4d7edbeb5efa73133cc3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype, Allocator &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the flattened array</para>
<para><simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1147" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1147" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4a3d1f968c924a4dc74cd8b617d30df6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype, Allocator &gt;::cbegin</definition>
        <argsstring>(size_type inRow) const</argsstring>
        <name>cbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the input row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1161" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1161" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a25c7145679e41227023ad6de4ab5cd18" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::ccolbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ccolbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_column_iterator to the beginning of the flattened array</para>
<para><simplesect kind="return"><para>const_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1233" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1233" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1252a696593c510d506c1bca8bd65c51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::ccolbegin</definition>
        <argsstring>(size_type inCol) const</argsstring>
        <name>ccolbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_column_iterator to the beginning of the input column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1247" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1247" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad2833ea5479c37de114bf52afff04a20" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::ccolend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ccolend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_column_iterator to 1 past the end of the flattened array</para>
<para><simplesect kind="return"><para>const_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1663" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1663" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4a493445c10ed3c299632bf8c7077cfb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::ccolend</definition>
        <argsstring>(size_type inCol) const</argsstring>
        <name>ccolend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_column_iterator to 1 past the end of the input col</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1677" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1677" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa16bc96e4bbafbc8a06743f3e4a10a6a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype, Allocator &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to 1 past the end of the flattened array</para>
<para><simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1491" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1491" bodyend="1494"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4da6aaa43b6074a4353328a8047992f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype, Allocator &gt;::cend</definition>
        <argsstring>(size_type inRow) const</argsstring>
        <name>cend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to 1 past the end of the input row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1505" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1505" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5a7fa82bdf3f34fcd3cc1dd2169c6c6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::clip</definition>
        <argsstring>(value_type inMin, value_type inMax) const</argsstring>
        <name>clip</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inMin</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an array whose values are limited to [min, max].</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.clip.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.clip.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMin</parametername>
</parameternamelist>
<parameterdescription>
<para>min value to clip to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inMax</parametername>
</parameternamelist>
<parameterdescription>
<para>max value to clip to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>clipped value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2312" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2312" bodyend="2324"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab6bf02841ec667f5bb4266da569c99fc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::colbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>colbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const column_iterator to the beginning of the flattened array <simplesect kind="return"><para>const_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1207" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1207" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a41f363682d797ed0ed236cf91bd644f1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a379e1e1ed2a61de6aa44226679620d47" kindref="member">column_iterator</ref></type>
        <definition>column_iterator nc::NdArray&lt; dtype, Allocator &gt;::colbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>colbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>column_iterator to the beginning of the flattened array <simplesect kind="return"><para>column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1177" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1177" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a3730d4ac599c06e0e25ac7838f53240b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a379e1e1ed2a61de6aa44226679620d47" kindref="member">column_iterator</ref></type>
        <definition>column_iterator nc::NdArray&lt; dtype, Allocator &gt;::colbegin</definition>
        <argsstring>(size_type inCol)</argsstring>
        <name>colbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>column_iterator to the beginning of the input column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1191" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1191" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1acadf6ded9a6eb2638d975da9dbbfe38c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::colbegin</definition>
        <argsstring>(size_type inCol) const</argsstring>
        <name>colbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const column_iterator to the beginning of the input column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1221" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1221" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ac1297463b545ecfd72d22549ce0db02a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::colend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>colend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const column_iterator to 1 past the end of the flattened array <simplesect kind="return"><para>const_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1637" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1637" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6501fd771b4dcf1fb49defeee43a47cc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a379e1e1ed2a61de6aa44226679620d47" kindref="member">column_iterator</ref></type>
        <definition>column_iterator nc::NdArray&lt; dtype, Allocator &gt;::colend</definition>
        <argsstring>() noexcept</argsstring>
        <name>colend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>column_iterator to 1 past the end of the flattened array <simplesect kind="return"><para>column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1607" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1607" bodyend="1610"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae611e2ecc5bae6035d0de4d48f5de239" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a379e1e1ed2a61de6aa44226679620d47" kindref="member">column_iterator</ref></type>
        <definition>column_iterator nc::NdArray&lt; dtype, Allocator &gt;::colend</definition>
        <argsstring>(size_type inCol)</argsstring>
        <name>colend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>column_iterator to the 1 past end of the column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1621" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1621" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a97f4fdf4d1a588662733af2bc7e63aaa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" kindref="member">const_column_iterator</ref></type>
        <definition>const_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::colend</definition>
        <argsstring>(size_type inCol) const</argsstring>
        <name>colend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const column_iterator to the 1 past end of the column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1651" column="31" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1651" bodyend="1654"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4dc9d45ee849274808d850deeba451dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::column</definition>
        <argsstring>(uint32 inColumn)</argsstring>
        <name>column</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inColumn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the full column of the array</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2334" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2334" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad0c493a734dbca9f622d0f7ca6dffbf4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype, Allocator &gt;::contains</definition>
        <argsstring>(value_type inValue, Axis inAxis=Axis::NONE) const</argsstring>
        <name>contains</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether or not a value is included the array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2348" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2348" bodyend="2386"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1f2d2aacc254129f36b0557a661e6664" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::copy</definition>
        <argsstring>() const</argsstring>
        <name>copy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a copy of the array</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.copy.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.copy.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2397" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2397" bodyend="2400"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a95cbc4440ac1e139642a08cbd075dafc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_iterator to the beginning of the flattened array</para>
<para><simplesect kind="return"><para>const_reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1319" column="32" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1319" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1af6b2581fae90a5c67e87df6a82ea13c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::crbegin</definition>
        <argsstring>(size_type inRow) const</argsstring>
        <name>crbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_iterator to the beginning of the input row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1333" column="32" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1333" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a35883ec844477b9bca2597939dd99c2a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>const_reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::crcolbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crcolbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_column_iterator to the beginning of the flattened array</para>
<para><simplesect kind="return"><para>const_reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1405" column="39" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1405" bodyend="1408"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a8afdb68c11124e1fe0309204f3996435" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>const_reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::crcolbegin</definition>
        <argsstring>(size_type inCol) const</argsstring>
        <name>crcolbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_column_iterator to the beginning of the input column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1419" column="39" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1419" bodyend="1427"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a55e5d41795f14f7f2aa256ba0f4bb676" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>const_reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::crcolend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crcolend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_column_iterator to 1 past the end of the flattened array</para>
<para><simplesect kind="return"><para>const_reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1749" column="39" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1749" bodyend="1752"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a35b66f060b1ed99a6fb5247581fcb8fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>const_reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::crcolend</definition>
        <argsstring>(size_type inCol) const</argsstring>
        <name>crcolend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_column_iterator to 1 past the end of the input col</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1763" column="39" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1763" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ac5d1c900c4db4263d1bf799ac3551ed6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_iterator to 1 past the end of the flattened array</para>
<para><simplesect kind="return"><para>const_reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1577" column="32" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1577" bodyend="1580"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1af3b4c48e3328a8dd22eedd27c225aeb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::crend</definition>
        <argsstring>(size_type inRow) const</argsstring>
        <name>crend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_iterator to 1 past the end of the input row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1591" column="32" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1591" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a29eabba849b35a3095cd341fa1c7b123" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_slice" kindref="compound">Slice</ref></type>
        <definition>Slice nc::NdArray&lt; dtype, Allocator &gt;::cSlice</definition>
        <argsstring>(int32 inStartIdx=0, uint32 inStepSize=1) const noexcept</argsstring>
        <name>cSlice</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inStartIdx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inStepSize</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> object for slicing a row to the end of array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inStartIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inStepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="891" column="15" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="891" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a75a231dec87e18370e9731214983858e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::cumprod</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>cumprod</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cumulative product of the elements along the given axis.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.cumprod.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.cumprod.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2413" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2413" bodyend="2464"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4baa93f2a125d7665f3cdfd8d96d3acc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::cumsum</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>cumsum</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the cumulative sum of the elements along the given axis.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.cumsum.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.cumsum.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2477" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2477" bodyend="2528"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a14e4541ae1e02ee5acdc01e18337d546" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a94982f81d8aa8c8a72abe0327f22b4dd" kindref="member">const_pointer</ref></type>
        <definition>const_pointer nc::NdArray&lt; dtype, Allocator &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the raw pointer to the underlying data <simplesect kind="return"><para>const_pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2545" column="23" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2545" bodyend="2548"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a3df9d88c710b83f211f67dd4511b4f49" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" kindref="member">pointer</ref></type>
        <definition>pointer nc::NdArray&lt; dtype, Allocator &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the raw pointer to the underlying data <simplesect kind="return"><para>pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2535" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2535" bodyend="2538"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ade07629d4094244f1dfca863af67e7c0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" kindref="member">pointer</ref></type>
        <definition>pointer nc::NdArray&lt; dtype, Allocator &gt;::dataRelease</definition>
        <argsstring>() noexcept</argsstring>
        <name>dataRelease</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases the internal data pointer so that the destructor will not call delete on it, and returns the raw pointer to the underlying data. <simplesect kind="return"><para>pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2557" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2557" bodyend="2561"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aae6a8845bf3654a27265ecffee163628" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::diagonal</definition>
        <argsstring>(int32 inOffset=0, Axis inAxis=Axis::ROW) const</argsstring>
        <name>diagonal</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" kindref="member">Axis::ROW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return specified diagonals.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.diagonal.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.diagonal.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the diagonal from the main diagonal. Can be both positive and negative. Defaults to 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default ROW) axis the offset is applied to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2574" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2574" bodyend="2628"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1acca065e13f826c504493a2eae31f5d0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::dot</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inOtherArray) const</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dot product of two arrays.</para>
<para>For 2-D arrays it is equivalent to matrix multiplication, and for 1-D arrays to inner product of vectors.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.dot.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.dot.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dot product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2644" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2644" bodyend="2677"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ada776db2a3c9ffef3dd7bf656cf75f08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype, Allocator &gt;::dump</definition>
        <argsstring>(const std::string &amp;inFilename) const</argsstring>
        <name>dump</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump a binary file of the array to the specified file. The array can be read back with <ref refid="namespacenc_1abec5f2e4d2a1598de762e32b839a3067" kindref="member">nc::load</ref>.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.dump.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.dump.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2688" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2688" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a635448f7b5d598e3a978d2c2e62d7727" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype, Allocator &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to 1 past the end of the flattened array <simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1465" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1465" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a153d3032d72c24d233407a351d0f8174" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a33ce0c581a22e809cfc5a79a534bf798" kindref="member">iterator</ref></type>
        <definition>iterator nc::NdArray&lt; dtype, Allocator &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>iterator to 1 past the end of the flattened array <simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1435" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1435" bodyend="1438"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a229701da7e9b386f5a58e5f1dc00bb73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a33ce0c581a22e809cfc5a79a534bf798" kindref="member">iterator</ref></type>
        <definition>iterator nc::NdArray&lt; dtype, Allocator &gt;::end</definition>
        <argsstring>(size_type inRow)</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>iterator to the 1 past end of the row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1449" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1449" bodyend="1457"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a546c8b9de00188fab35a6c5075147cc1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nc::NdArray&lt; dtype, Allocator &gt;::end</definition>
        <argsstring>(size_type inRow) const</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the 1 past end of the row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1479" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1479" bodyend="1482"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a349b83beffbfb0a631799f921f13f7ad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
        <definition>Endian nc::NdArray&lt; dtype, Allocator &gt;::endianess</definition>
        <argsstring>() const noexcept</argsstring>
        <name>endianess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the NdArrays endianess</para>
<para><simplesect kind="return"><para>Endian </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2716" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2716" bodyend="2721"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a646ec787a3b7331b34c0c3f21e0d992d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::fill</definition>
        <argsstring>(value_type inFillValue) noexcept</argsstring>
        <name>fill</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inFillValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill the array with a scaler value.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.fill.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.fill.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFillValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2734" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2734" bodyend="2738"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a91687e040d05ac06b389d389facff3c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::NdArray&lt; dtype, Allocator &gt;::flatnonzero</definition>
        <argsstring>() const</argsstring>
        <name>flatnonzero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the indices of the flattened array of the elements that are non-zero.</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2748" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2748" bodyend="2764"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a22ba05b8e537c008a2143396b5995551" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::flatten</definition>
        <argsstring>() const</argsstring>
        <name>flatten</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a copy of the array collapsed into one dimension.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.flatten.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.flatten.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2775" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2775" bodyend="2780"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aeabe57b820b8c8211565876e54d21422" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
        <definition>value_type nc::NdArray&lt; dtype, Allocator &gt;::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the first element of the flattened array.</para>
<para><simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2789" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2789" bodyend="2792"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a823d56e88aa815d86d41e8b11d348a6a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" kindref="member">reference</ref></type>
        <definition>reference nc::NdArray&lt; dtype, Allocator &gt;::front</definition>
        <argsstring>() noexcept</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element of the flattened array.</para>
<para><simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2801" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2801" bodyend="2804"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aacff9537c7c8537583b70115626a420b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" kindref="member">reference</ref></type>
        <definition>reference nc::NdArray&lt; dtype, Allocator &gt;::front</definition>
        <argsstring>(size_type row)</argsstring>
        <name>front</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element of the input row.</para>
<para><simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2825" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2825" bodyend="2828"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a59be771816a45a247f0e15a27b7f10d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
        <definition>value_type nc::NdArray&lt; dtype, Allocator &gt;::front</definition>
        <argsstring>(size_type row) const</argsstring>
        <name>front</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the first element of the input row.</para>
<para><simplesect kind="return"><para>dtype </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2813" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2813" bodyend="2816"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9437732d220581563d44c800ce240e17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::getByIndices</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inIndices) const</argsstring>
        <name>getByIndices</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new flat array with the givin flat input indices.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2839" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2839" bodyend="2842"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4da478ab5a1c836be7ad2f9d6bfed91e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::getByMask</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask) const</argsstring>
        <name>getByMask</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes in a boolean mask the same size as the array and returns a flattened array with the values cooresponding to the input mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2855" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2855" bodyend="2858"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a3e5261e1be6357a2c608f5e1d97b35f9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::NdArray&lt; dtype, Allocator &gt;::isempty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isempty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return if the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> is empty. ie the default construtor was used.</para>
<para><simplesect kind="return"><para>boolean </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2868" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2868" bodyend="2871"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a344f12e052eeb49cc87e361127386a64" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::NdArray&lt; dtype, Allocator &gt;::isflat</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isflat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return if the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> is empty. ie the default construtor was used.</para>
<para><simplesect kind="return"><para>boolean </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2881" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2881" bodyend="2884"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0ba38857fd4f9474e2814bbf1c3a6a0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype, Allocator &gt;::issorted</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>issorted</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return if the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> is sorted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2893" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2893" bodyend="2936"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a302be17d815b1a4e353e6a2aade581a5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::NdArray&lt; dtype, Allocator &gt;::issquare</definition>
        <argsstring>() const noexcept</argsstring>
        <name>issquare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return if the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> is sorted.</para>
<para><simplesect kind="return"><para>boolean </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2944" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2944" bodyend="2947"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abec76b8f271e07fa07cc2f88fed676fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
        <definition>value_type nc::NdArray&lt; dtype, Allocator &gt;::item</definition>
        <argsstring>() const</argsstring>
        <name>item</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an element of an array to a standard C++ scaler and return it.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.item.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.item.html</ulink></para>
<para><simplesect kind="return"><para>array element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2958" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2958" bodyend="2966"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abbca6c205525a4b706729f9f36acc06d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::max</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the maximum along a given axis.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.max.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.max.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="2979" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="2979" bodyend="3023"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4d733d7a90d94c3f21e90ab79dc2cc14" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::median</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>median</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the median along a given axis. If the dtype is floating point then the middle elements will be averaged for arrays of even number of elements. If the dtype is integral then the middle elements will be intager averaged (rounded down to integer) for arrays of even number of elements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3095" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3095" bodyend="3186"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7f0c49ac50a79ba24ea8d351ee70fd55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::min</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the minimum along a given axis.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.min.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.min.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3036" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3036" bodyend="3080"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa7592409ea9bc24e4324725e5ff74ee9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::nans</definition>
        <argsstring>() noexcept</argsstring>
        <name>nans</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the array with nans. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3193" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3193" bodyend="3199"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a775e07af6829b5336969c703c4eddba7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1a773f8535ba713f886e9e1b8378f6d76d" kindref="member">uint64</ref></type>
        <definition>uint64 nc::NdArray&lt; dtype, Allocator &gt;::nbytes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nbytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of bytes held by the array</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.nbytes.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.nbytes.html</ulink></para>
<para><simplesect kind="return"><para>number of bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3210" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3210" bodyend="3213"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae5fe2e501921c3361c0edc66030b772d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::newbyteorder</definition>
        <argsstring>(Endian inEndianess) const</argsstring>
        <name>newbyteorder</name>
        <param>
          <type><ref refid="namespacenc_1a8dcbcb343147d09e74689ad8a2586152" kindref="member">Endian</ref></type>
          <declname>inEndianess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the array with the same data viewed with a different byte order. only works for integer types, floating point types will not compile and you will be confused as to why...</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.newbyteorder.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.newbyteorder.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inEndianess</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3229" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3229" bodyend="3352"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a379f8cd88dc84a38d668cb7bf97078ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt;</type>
        <definition>NdArray&lt;bool&gt; nc::NdArray&lt; dtype, Allocator &gt;::none</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>none</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if none elements evaluate to True or non zero</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.any.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.any.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3365" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3365" bodyend="3408"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6cc8c7b53a707468d6da112849970904" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt;, <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt; &gt;</type>
        <definition>std::pair&lt; NdArray&lt; uint32 &gt;, NdArray&lt; uint32 &gt; &gt; nc::NdArray&lt; dtype, _Alloc &gt;::nonzero</definition>
        <argsstring>() const</argsstring>
        <name>nonzero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the row/col indices of the array of the elements that are non-zero.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.nonzero.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.nonzero.html</ulink></para>
<para><simplesect kind="return"><para>std::pair&lt;NdArray, NdArray&gt; where first is the row indices and second is the column indices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3421" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4694" bodyend="4714"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a0049b5d6d1d99463edc773f01eb7c091" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
        <definition>uint32 nc::NdArray&lt; dtype, Allocator &gt;::numCols</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of columns in the array</para>
<para><simplesect kind="return"><para>uint32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3431" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3431" bodyend="3434"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2dbdc72c98c216a133f7e1a8d3c067f7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
        <definition>uint32 nc::NdArray&lt; dtype, Allocator &gt;::numRows</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of rows in the array</para>
<para><simplesect kind="return"><para>uint32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3444" column="16" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3444" bodyend="3447"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ac6e5a0c875c593a6bc1970745af3684b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::ones</definition>
        <argsstring>() noexcept</argsstring>
        <name>ones</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the array with ones </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3454" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3454" bodyend="3460"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab6ac5d2c6614d96d2bea64a4567036fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::operator()</definition>
        <argsstring>(const Slice &amp;inRowSlice, const Slice &amp;inColSlice) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D Slicing access operator with bounds checking. returned array is of the range [start, stop).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="809" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="809" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a21c26fd8c8c107a71b19d7c27a42db29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::operator()</definition>
        <argsstring>(const Slice &amp;inRowSlice, int32 inColIndex) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D Slicing access operator with bounds checking. returned array is of the range [start, stop).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="841" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="841" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad7b3a47d68e5522966518eb0eaf10898" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::operator()</definition>
        <argsstring>(int32 inRowIndex, const Slice &amp;inColSlice) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D Slicing access operator with bounds checking. returned array is of the range [start, stop).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="866" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="866" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aac0b806c621ce85a61f1370cc618fcc8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a2e9001eb3a7fb5b44f6400b3cc3b3222" kindref="member">const_reference</ref></type>
        <definition>const_reference nc::NdArray&lt; dtype, Allocator &gt;::operator()</definition>
        <argsstring>(int32 inRowIndex, int32 inColIndex) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 2D access operator with no bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="708" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="708" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abf2c4d2e67b692c67e5aed62cd981800" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" kindref="member">reference</ref></type>
        <definition>reference nc::NdArray&lt; dtype, Allocator &gt;::operator()</definition>
        <argsstring>(int32 inRowIndex, int32 inColIndex) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>2D access operator with no bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="684" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="684" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1abe4cda5855bc5d6aee488293000d1acb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::operator=</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment operator, performs a deep copy</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;dtype&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="573" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="573" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5ff24670b2173fccf1c9a35b688f2683" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::operator=</definition>
        <argsstring>(NdArray&lt; dtype &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move operator, performs a deep move</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;dtype&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="618" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="618" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae5150db09cf7f76269b3254ceb0c43a8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::operator=</definition>
        <argsstring>(value_type inValue) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment operator, sets the entire array to a single scaler value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;dtype&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="599" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="599" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab04b63c2794747b88b0e640f737c6b2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::operator[]</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the values from the input mask</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="756" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="756" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae212e8367ba037800af651e2d00897b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::operator[]</definition>
        <argsstring>(const NdArray&lt; size_type &gt; &amp;inIndices) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the values from the input indices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="782" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="782" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a4744ab68830cc2cc16d8804295662b6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::operator[]</definition>
        <argsstring>(const Slice &amp;inSlice) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>1D Slicing access operator with bounds checking. returned array is of the range [start, stop).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="733" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="733" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aeabee2aba11a885f3bd874b7a06d62ea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a2e9001eb3a7fb5b44f6400b3cc3b3222" kindref="member">const_reference</ref></type>
        <definition>const_reference nc::NdArray&lt; dtype, Allocator &gt;::operator[]</definition>
        <argsstring>(int32 inIndex) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const 1D access operator with no bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="665" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="665" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa58a51df41648b4d39f2f972c60e09ae" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" kindref="member">reference</ref></type>
        <definition>reference nc::NdArray&lt; dtype, Allocator &gt;::operator[]</definition>
        <argsstring>(int32 inIndex) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>1D access operator with no bounds checking</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="646" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="646" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a63a1c0f9fdef078770e4f8cbe2c249ec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::NdArray&lt; dtype, Allocator &gt;::ownsInternalData</definition>
        <argsstring>() noexcept</argsstring>
        <name>ownsInternalData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not the array object owns the underlying data</para>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3468" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3468" bodyend="3471"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2fa17d38624fabcae789cfa3323b66d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::partition</definition>
        <argsstring>(uint32 inKth, Axis inAxis=Axis::NONE)</argsstring>
        <name>partition</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inKth</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rearranges the elements in the array in such a way that value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.partition.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.partition.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inKth</parametername>
</parameternamelist>
<parameterdescription>
<para>kth element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3489" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3489" bodyend="3548"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a8729dc551775ca022cbfbf66b22c999b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype, Allocator &gt;::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the array to the console. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3555" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3555" bodyend="3560"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1a95a48b1434d2260a265d13509f864d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::prod</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>prod</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the product of the array elements over the given axis</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.prod.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.prod.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3573" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3573" bodyend="3615"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aabfb3d013e77626b7e423da910ab9ffb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::ptp</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>ptp</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Peak to peak (maximum - minimum) value along a given axis.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.ptp.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.ptp.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3628" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3628" bodyend="3674"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a6a0bd2406380b080b0ab7565759bb660" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inIndices, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a.flat[n] = values[n] for all n in indices.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3737" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3737" bodyend="3751"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa8f52298436a941b3e53b8204b0b85df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inIndices, value_type inValue)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inIndices</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a.flat[n] = values for all n in indices.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndices</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3718" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3718" bodyend="3726"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a17398abb49993b960a33bd14c0db399e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(const Slice &amp;inRowSlice, const Slice &amp;inColSlice, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input values.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3886" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3886" bodyend="3905"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a094424d8f368eaa3730102a5f75f0c2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(const Slice &amp;inRowSlice, const Slice &amp;inColSlice, value_type inValue)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input value.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3808" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3808" bodyend="3826"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1af062cf00ee693dbd74d0f440b1cbded7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(const Slice &amp;inRowSlice, int32 inColIndex, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input values.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3917" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3917" bodyend="3930"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2ebd28ce6f5227d42bd5c990a22d9f29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(const Slice &amp;inRowSlice, int32 inColIndex, value_type inValue)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inRowSlice</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inColIndex</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input value.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3838" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3838" bodyend="3850"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab67c8f364caab7706d32041b2d01012d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(const Slice &amp;inSlice, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input values.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3784" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3784" bodyend="3796"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ae8213735dca5d0ad895138f01aa70947" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(const Slice &amp;inSlice, value_type inValue)</argsstring>
        <name>put</name>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inSlice</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input value.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3762" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3762" bodyend="3773"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a02a06425d6284dbc370807ed11b1f7b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(int32 inIndex, value_type inValue)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inIndex</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the flat index element to the value</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3685" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3685" bodyend="3690"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a57e1fc57f28b17f5ba6b421b82066388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(int32 inRow, int32 inCol, value_type inValue)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRow</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inCol</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the 2D row/col index element to the value</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3702" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3702" bodyend="3707"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad74b89f5bac37d089ee940ae8c225703" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(int32 inRowIndex, const Slice &amp;inColSlice, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input values.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3942" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3942" bodyend="3955"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7ae6272ff9d4dea6c890ef6dcbae6eb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::put</definition>
        <argsstring>(int32 inRowIndex, const Slice &amp;inColSlice, value_type inValue)</argsstring>
        <name>put</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inRowIndex</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>inColSlice</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the slice indices to the input value.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.put.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inColSlice</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3862" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3862" bodyend="3874"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aaf9229244e8984f557a823223ac35a29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::putMask</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask, const NdArray&lt; dtype &gt; &amp;inValues)</argsstring>
        <name>putMask</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mask indices to the input values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3981" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3981" bodyend="3989"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a52e65ffbf29d168d53ac7605acb69b4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::putMask</definition>
        <argsstring>(const NdArray&lt; bool &gt; &amp;inMask, value_type inValue)</argsstring>
        <name>putMask</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; bool &gt; &amp;</type>
          <declname>inMask</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mask indices to the input value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3964" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3964" bodyend="3972"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aeca85f2279281bd389225a76e23e1c45" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::ravel</definition>
        <argsstring>() noexcept</argsstring>
        <name>ravel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flattens the array but does not make a copy.</para>
<para>Numpy Reference: <ulink url="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html">https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="3999" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="3999" bodyend="4003"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad779b3d2a2f094370be77e515533f143" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the flattened array <simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1293" column="32" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1293" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a06b5c7ba13ae9f8750bca6d5f3803c73" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a9987ced72f8182d4b55807c0177eab11" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverse_iterator to the beginning of the flattened array <simplesect kind="return"><para>reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1263" column="26" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1263" bodyend="1266"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2aa9a0589da3c0b19b1b413e71f65667" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a9987ced72f8182d4b55807c0177eab11" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::rbegin</definition>
        <argsstring>(size_type inRow)</argsstring>
        <name>rbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverse_iterator to the beginning of the input row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1277" column="26" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1277" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9f983aabd3568e7bd1be0a0c4e2b881d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::rbegin</definition>
        <argsstring>(size_type inRow) const</argsstring>
        <name>rbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the input row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1307" column="32" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1307" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a012f1203a072caeba4221aaa3c044186" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>const_reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::rcolbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rcolbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the flattened array <simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1379" column="39" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1379" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a48fb313ad0eb8126c338a319a5a2fd98" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1abc1bc6a854968940dac643396b2fb1b5" kindref="member">reverse_column_iterator</ref></type>
        <definition>reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::rcolbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rcolbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverse_column_iterator to the beginning of the flattened array <simplesect kind="return"><para>reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1349" column="33" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1349" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a56704aea2c006973065aaa2848faa7fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1abc1bc6a854968940dac643396b2fb1b5" kindref="member">reverse_column_iterator</ref></type>
        <definition>reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::rcolbegin</definition>
        <argsstring>(size_type inCol)</argsstring>
        <name>rcolbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverse_column_iterator to the beginning of the input column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1363" column="33" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1363" bodyend="1371"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a5f70273a5bbff4f0b0c5086649939301" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>const_reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::rcolbegin</definition>
        <argsstring>(size_type inCol) const</argsstring>
        <name>rcolbegin</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const iterator to the beginning of the input column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1393" column="39" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1393" bodyend="1396"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2d5976e4cd61862c74dce30c94f8fb87" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>const_reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::rcolend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rcolend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_column_iterator to 1 past the end of the flattened array <simplesect kind="return"><para>const_reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1723" column="39" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1723" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad5f870f49c9601930423258dcc723c8e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1abc1bc6a854968940dac643396b2fb1b5" kindref="member">reverse_column_iterator</ref></type>
        <definition>reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::rcolend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rcolend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverse_column_iterator to 1 past the end of the flattened array <simplesect kind="return"><para>reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1693" column="33" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1693" bodyend="1696"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a434f10a7956f425882fbbbc90038e4cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1abc1bc6a854968940dac643396b2fb1b5" kindref="member">reverse_column_iterator</ref></type>
        <definition>reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::rcolend</definition>
        <argsstring>(size_type inCol)</argsstring>
        <name>rcolend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverse_column_iterator to the 1 past end of the column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1707" column="33" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1707" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a51e2cddde9482a27bf73fa308e0268c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>const_reverse_column_iterator nc::NdArray&lt; dtype, Allocator &gt;::rcolend</definition>
        <argsstring>(size_type inCol) const</argsstring>
        <name>rcolend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inCol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_column_iterator to the 1 past end of the column</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inCol</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_reverse_column_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1737" column="39" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1737" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a59de727a0db449ca5a28d436c9cec165" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_iterator to 1 past the end of the flattened array <simplesect kind="return"><para>const_reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1551" column="32" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1551" bodyend="1554"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a92c90b8671a637ec7d7821f6e8bdfa56" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a9987ced72f8182d4b55807c0177eab11" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverse_iterator to 1 past the end of the flattened array <simplesect kind="return"><para>reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1521" column="26" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1521" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9047b67188b652c471db37731659c598" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a9987ced72f8182d4b55807c0177eab11" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::rend</definition>
        <argsstring>(size_type inRow)</argsstring>
        <name>rend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reverse_iterator to the 1 past end of the row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1535" column="26" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1535" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a93f962a3badfd82da685a2d7fdf006aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nc::NdArray&lt; dtype, Allocator &gt;::rend</definition>
        <argsstring>(size_type inRow) const</argsstring>
        <name>rend</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const_reverse_iterator to the 1 past end of the row</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRow</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_reverse_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="1565" column="32" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="1565" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7d72328d5853baedb1644ae387ed3331" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::repeat</definition>
        <argsstring>(const Shape &amp;inRepeatShape) const</argsstring>
        <name>repeat</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inRepeatShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat elements of an array.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inRepeatShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4059" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4059" bodyend="4062"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1acd2185e49f9cbe68b3d3fe6cef552d34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::repeat</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols) const</argsstring>
        <name>repeat</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat elements of an array.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.repeat.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4016" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4016" bodyend="4046"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aefaba20fd8cf6710714340ea9733f1d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype, Allocator &gt;::replace</definition>
        <argsstring>(value_type oldValue, value_type newValue)</argsstring>
        <name>replace</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>oldValue</declname>
        </param>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces a value of the array with another value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to replace </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to replace with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4071" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4071" bodyend="4076"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a81992957eaa4cf2da430e12296af79c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::reshape</definition>
        <argsstring>(const Shape &amp;inShape)</argsstring>
        <name>reshape</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The new shape should be compatible with the original shape. If an single integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.reshape.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.reshape.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4169" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4169" bodyend="4172"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa646e053a4fcd7ef3356add1edb4240d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::reshape</definition>
        <argsstring>(int32 inNumRows, int32 inNumCols)</argsstring>
        <name>reshape</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The new shape should be compatible with the original shape. If an single integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.reshape.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.reshape.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4116" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4116" bodyend="4155"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ace0dfa53f15057e5f505a41b67f000bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::reshape</definition>
        <argsstring>(size_type inSize)</argsstring>
        <name>reshape</name>
        <param>
          <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
          <declname>inSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The new shape should be compatible with the original shape. If an single integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.reshape.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.reshape.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4089" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4089" bodyend="4102"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1f999dc4afd08a9bc9c696af66d3ccb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::resizeFast</definition>
        <argsstring>(const Shape &amp;inShape)</argsstring>
        <name>resizeFast</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change shape and size of array in-place. All previous data of the array is lost.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4200" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4200" bodyend="4203"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ac15af1559e8f8dcd8cd5930c5ce54377" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::resizeFast</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols)</argsstring>
        <name>resizeFast</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change shape and size of array in-place. All previous data of the array is lost.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4184" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4184" bodyend="4188"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a9499c04345682f4bf0afd8a5d16df435" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::resizeSlow</definition>
        <argsstring>(const Shape &amp;inShape)</argsstring>
        <name>resizeSlow</name>
        <param>
          <type>const <ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with the specified shape. If new shape is larger than old shape then array will be padded with zeros. If new shape is smaller than the old shape then the data will be discarded.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inShape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4257" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4257" bodyend="4260"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a091f587d753e4e4aec1bb6621ccbaa41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::resizeSlow</definition>
        <argsstring>(uint32 inNumRows, uint32 inNumCols)</argsstring>
        <name>resizeSlow</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inNumRows</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inNumCols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a new array with the specified shape. If new shape is larger than old shape then array will be padded with zeros. If new shape is smaller than the old shape then the data will be discarded.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.resize.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumRows</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inNumCols</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4217" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4217" bodyend="4243"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a13b0f7af99772cfbca83b6734fbef04d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::round</definition>
        <argsstring>(uint8 inNumDecimals=0) const</argsstring>
        <name>round</name>
        <param>
          <type><ref refid="namespacenc_1a9ba5a0aa26753a185985b8273fb9062d" kindref="member">uint8</ref></type>
          <declname>inNumDecimals</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a with each element rounded to the given number of decimals.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.round.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.round.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inNumDecimals</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4274" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4274" bodyend="4288"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ab24cce75b03204af139d8d32090cdae8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::row</definition>
        <argsstring>(uint32 inRow)</argsstring>
        <name>row</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inRow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the full row of the array</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4298" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4298" bodyend="4301"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1af0fb0a32e08456603964206487aebc88" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_slice" kindref="compound">Slice</ref></type>
        <definition>Slice nc::NdArray&lt; dtype, Allocator &gt;::rSlice</definition>
        <argsstring>(int32 inStartIdx=0, uint32 inStepSize=1) const noexcept</argsstring>
        <name>rSlice</name>
        <param>
          <type><ref refid="namespacenc_1a9386099a0fdc2bc9fb0dbfde5606584d" kindref="member">int32</ref></type>
          <declname>inStartIdx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inStepSize</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> object for slicing a column to the end of the array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inStartIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inStepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_slice" kindref="compound">Slice</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="906" column="15" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="906" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a2d1b4adfe3c9897ffe3dca45e357b2b4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref></type>
        <definition>Shape nc::NdArray&lt; dtype, Allocator &gt;::shape</definition>
        <argsstring>() const noexcept</argsstring>
        <name>shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the shape of the array</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.shape.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.shape.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_shape" kindref="compound">Shape</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4312" column="15" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4312" bodyend="4315"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a055875abbe80163ca91328c0fa8ffbfa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" kindref="member">size_type</ref></type>
        <definition>size_type nc::NdArray&lt; dtype, Allocator &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the size of the array</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.size.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.size.html</ulink></para>
<para><simplesect kind="return"><para>size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4326" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4326" bodyend="4329"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a3c0a24c292c340c58a6da5526654f3bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::sort</definition>
        <argsstring>(Axis inAxis=Axis::NONE)</argsstring>
        <name>sort</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sort an array, in-place.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.sort.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.sort.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4342" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4342" bodyend="4380"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aa44f94cc8d02a56636223686f30d84f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nc::NdArray&lt; dtype, Allocator &gt;::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> as a string representation</para>
<para><simplesect kind="return"><para>string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4389" column="21" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4389" bodyend="4414"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a467700098b002b5631c756ca0fd50cae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::sum</definition>
        <argsstring>(Axis inAxis=Axis::NONE) const</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sum of the array elements over the given axis.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.sum.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.sum.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4427" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4427" bodyend="4466"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a7995ba04b64061dfd931ac58c05826f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::swapaxes</definition>
        <argsstring>() const</argsstring>
        <name>swapaxes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interchange two axes of an array. Equivalent to transpose...</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.swapaxes.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.swapaxes.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4477" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4477" bodyend="4480"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1aea0b5300f1a62b3fa51d0b18e5f0ce38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::NdArray&lt; dtype, Allocator &gt;::tofile</definition>
        <argsstring>(const std::string &amp;inFilename, const std::string &amp;inSep=&quot;&quot;) const</argsstring>
        <name>tofile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>inSep</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write array to a file as text or binary (default).. The data produced by this method can be recovered using the function <ref refid="namespacenc_1ae299ba41f67aeade5634e93fd8b417c9" kindref="member">fromfile()</ref>.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.tofile.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.tofile.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inFilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inSep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator between array items for text output. If &quot;&quot; (empty), a binary file is written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4495" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4495" bodyend="4528"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a1fb3a21ab9c10a2684098df919b5b440" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; dtype &gt;</type>
        <definition>std::vector&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::toStlVector</definition>
        <argsstring>() const</argsstring>
        <name>toStlVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write flattened array to an STL vector</para>
<para><simplesect kind="return"><para>std::vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4537" column="21" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4537" bodyend="4540"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1ad58c8cb32887059d77903ff4c224e9f3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" kindref="member">value_type</ref></type>
        <definition>value_type nc::NdArray&lt; dtype, Allocator &gt;::trace</definition>
        <argsstring>(uint32 inOffset=0, Axis inAxis=Axis::ROW) const noexcept</argsstring>
        <name>trace</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84a54c1ed33c810f895d48c008d89f880b7" kindref="member">Axis::ROW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sum along diagonals of the array.</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.trace.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.trace.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the diagonal from the main diagonal. Can be both positive and negative. Defaults to 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default ROW) Axis to offset from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4554" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4554" bodyend="4597"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1a78c99f8306415d8e0ac0e03bb69c6d29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::NdArray&lt; dtype, Allocator &gt;::transpose</definition>
        <argsstring>() const</argsstring>
        <name>transpose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tranpose the rows and columns of an array</para>
<para>Numpy Reference: <ulink url="https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.transpose.html">https://www.numpy.org/devdocs/reference/generated/numpy.ndarray.transpose.html</ulink></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4608" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4608" bodyend="4619"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1_nd_array_1acac210ad3d3bd973be4bece6e6b625ed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
        <definition>NdArray&lt;dtype&gt;&amp; nc::NdArray&lt; dtype, Allocator &gt;::zeros</definition>
        <argsstring>() noexcept</argsstring>
        <name>zeros</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the array with zeros </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="4626" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="4626" bodyend="4632"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Holds 1D and 2D arrays, the main work horse of the NumCpp library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nc::NdArray&lt; dtype, Allocator &gt;</label>
        <link refid="classnc_1_1_nd_array"/>
      </node>
    </collaborationgraph>
    <location file="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" line="76" column="1" bodyfile="C:/Github/NumCpp/include/NumCpp/NdArray/NdArrayCore.hpp" bodystart="75" bodyend="4689"/>
    <listofallmembers>
      <member refid="classnc_1_1_nd_array_1afaba38e055338400eb8a404dfda573d5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>all</name></member>
      <member refid="classnc_1_1_nd_array_1a3332543f83df7836554bc121270add64" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>allocator_</name></member>
      <member refid="classnc_1_1_nd_array_1a86488494684f55c32dd82e90b818f77e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>allocator_type</name></member>
      <member refid="classnc_1_1_nd_array_1a2fd1d5a43a493e51af456ae515c689af" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>AllocTraits</name></member>
      <member refid="classnc_1_1_nd_array_1a43461990766ccd8ce47c93d37501ec0f" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>AllocType</name></member>
      <member refid="classnc_1_1_nd_array_1a1463c8f1cb95cb8546d02502d86bd91e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>any</name></member>
      <member refid="classnc_1_1_nd_array_1ad4a41193c4f364a817f51ac7f6932b1f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>argmax</name></member>
      <member refid="classnc_1_1_nd_array_1a62a38761f6f8fd005e225a5d3328e073" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>argmin</name></member>
      <member refid="classnc_1_1_nd_array_1ae0ec4abb78faecc68f8d7e2198894196" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>argsort</name></member>
      <member refid="classnc_1_1_nd_array_1a50d403e680414c715c5d0fb844725afc" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>array_</name></member>
      <member refid="classnc_1_1_nd_array_1a028372744b6c41150c339088b1d1a0dc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>astype</name></member>
      <member refid="classnc_1_1_nd_array_1a028372744b6c41150c339088b1d1a0dc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>astype</name></member>
      <member refid="classnc_1_1_nd_array_1a028372744b6c41150c339088b1d1a0dc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>astype</name></member>
      <member refid="classnc_1_1_nd_array_1a028372744b6c41150c339088b1d1a0dc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>astype</name></member>
      <member refid="classnc_1_1_nd_array_1a3ae4c372620db7cf0211867dcb886b48" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a10ef25d07c5761028091cda2c7f20d1f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1ade8b486f8c2ffce283abea6126cb3a63" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a77807cb1488da10f8654dc6331426ca6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a39dc0db6c17edef6642b55b4ce68df48" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1adf7b073b906cd66e1c8a78df865b5679" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a1537e603e458ad93bdde061e476305d6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a7b5c383337c887ddf537708b29b64afd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>at</name></member>
      <member refid="classnc_1_1_nd_array_1a897e7f07e899fa478616c6cfdf40ab24" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>back</name></member>
      <member refid="classnc_1_1_nd_array_1a555efdc758b47b107c9c94593b6c2470" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>back</name></member>
      <member refid="classnc_1_1_nd_array_1addb7c0fee95cf2fa9a05cad2d67cf099" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>back</name></member>
      <member refid="classnc_1_1_nd_array_1a20fb268d9bd6c25dd70b6772f5ff5b89" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>back</name></member>
      <member refid="classnc_1_1_nd_array_1ab57282e02905eeb2a932eeb73983221f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>begin</name></member>
      <member refid="classnc_1_1_nd_array_1a57fa866d30c298337bfc906ae73b6a40" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>begin</name></member>
      <member refid="classnc_1_1_nd_array_1ae47b79d2054d83dc0c7deb617ab7d1c2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>begin</name></member>
      <member refid="classnc_1_1_nd_array_1ab3cdc446e55744b31d42dfb53fcdc7cf" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>begin</name></member>
      <member refid="classnc_1_1_nd_array_1a5798774fe863c25277b4a3fa2c8f0326" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>byteswap</name></member>
      <member refid="classnc_1_1_nd_array_1a0bee49339bdc4d7edbeb5efa73133cc3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a4a3d1f968c924a4dc74cd8b617d30df6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a25c7145679e41227023ad6de4ab5cd18" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ccolbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a1252a696593c510d506c1bca8bd65c51" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ccolbegin</name></member>
      <member refid="classnc_1_1_nd_array_1ad2833ea5479c37de114bf52afff04a20" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ccolend</name></member>
      <member refid="classnc_1_1_nd_array_1a4a493445c10ed3c299632bf8c7077cfb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ccolend</name></member>
      <member refid="classnc_1_1_nd_array_1aa16bc96e4bbafbc8a06743f3e4a10a6a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cend</name></member>
      <member refid="classnc_1_1_nd_array_1a4da6aaa43b6074a4353328a8047992f6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cend</name></member>
      <member refid="classnc_1_1_nd_array_1a5a7fa82bdf3f34fcd3cc1dd2169c6c6f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>clip</name></member>
      <member refid="classnc_1_1_nd_array_1a41f363682d797ed0ed236cf91bd644f1" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>colbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a3730d4ac599c06e0e25ac7838f53240b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>colbegin</name></member>
      <member refid="classnc_1_1_nd_array_1ab6bf02841ec667f5bb4266da569c99fc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>colbegin</name></member>
      <member refid="classnc_1_1_nd_array_1acadf6ded9a6eb2638d975da9dbbfe38c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>colbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a6501fd771b4dcf1fb49defeee43a47cc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>colend</name></member>
      <member refid="classnc_1_1_nd_array_1ae611e2ecc5bae6035d0de4d48f5de239" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>colend</name></member>
      <member refid="classnc_1_1_nd_array_1ac1297463b545ecfd72d22549ce0db02a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>colend</name></member>
      <member refid="classnc_1_1_nd_array_1a97f4fdf4d1a588662733af2bc7e63aaa" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>colend</name></member>
      <member refid="classnc_1_1_nd_array_1a4dc9d45ee849274808d850deeba451dd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>column</name></member>
      <member refid="classnc_1_1_nd_array_1a379e1e1ed2a61de6aa44226679620d47" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>column_iterator</name></member>
      <member refid="classnc_1_1_nd_array_1a1307cf472f722baa8850200dcb7a3a89" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>const_column_iterator</name></member>
      <member refid="classnc_1_1_nd_array_1a49deeee0db98eae1c16ac6bca6fa6f31" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>const_iterator</name></member>
      <member refid="classnc_1_1_nd_array_1a94982f81d8aa8c8a72abe0327f22b4dd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>const_pointer</name></member>
      <member refid="classnc_1_1_nd_array_1a2e9001eb3a7fb5b44f6400b3cc3b3222" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>const_reference</name></member>
      <member refid="classnc_1_1_nd_array_1aa4f80e21b4b0f30ff98d1b90ae4fd70d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>const_reverse_column_iterator</name></member>
      <member refid="classnc_1_1_nd_array_1a6de6f2ef3b2519edd272623a9681b527" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>const_reverse_iterator</name></member>
      <member refid="classnc_1_1_nd_array_1ad0c493a734dbca9f622d0f7ca6dffbf4" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>contains</name></member>
      <member refid="classnc_1_1_nd_array_1a1f2d2aacc254129f36b0557a661e6664" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>copy</name></member>
      <member refid="classnc_1_1_nd_array_1a95cbc4440ac1e139642a08cbd075dafc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>crbegin</name></member>
      <member refid="classnc_1_1_nd_array_1af6b2581fae90a5c67e87df6a82ea13c5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>crbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a35883ec844477b9bca2597939dd99c2a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>crcolbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a8afdb68c11124e1fe0309204f3996435" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>crcolbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a55e5d41795f14f7f2aa256ba0f4bb676" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>crcolend</name></member>
      <member refid="classnc_1_1_nd_array_1a35b66f060b1ed99a6fb5247581fcb8fc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>crcolend</name></member>
      <member refid="classnc_1_1_nd_array_1ac5d1c900c4db4263d1bf799ac3551ed6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>crend</name></member>
      <member refid="classnc_1_1_nd_array_1af3b4c48e3328a8dd22eedd27c225aeb5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>crend</name></member>
      <member refid="classnc_1_1_nd_array_1a29eabba849b35a3095cd341fa1c7b123" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cSlice</name></member>
      <member refid="classnc_1_1_nd_array_1a75a231dec87e18370e9731214983858e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cumprod</name></member>
      <member refid="classnc_1_1_nd_array_1a4baa93f2a125d7665f3cdfd8d96d3acc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>cumsum</name></member>
      <member refid="classnc_1_1_nd_array_1a3df9d88c710b83f211f67dd4511b4f49" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>data</name></member>
      <member refid="classnc_1_1_nd_array_1a14e4541ae1e02ee5acdc01e18337d546" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>data</name></member>
      <member refid="classnc_1_1_nd_array_1ade07629d4094244f1dfca863af67e7c0" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>dataRelease</name></member>
      <member refid="classnc_1_1_nd_array_1ae7a67ddaaff2e98786867814e6a1016c" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>deleteArray</name></member>
      <member refid="classnc_1_1_nd_array_1aae6a8845bf3654a27265ecffee163628" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>diagonal</name></member>
      <member refid="classnc_1_1_nd_array_1a612cdd532e56b711ebb9c2478971c04f" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>difference_type</name></member>
      <member refid="classnc_1_1_nd_array_1acca065e13f826c504493a2eae31f5d0e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>dot</name></member>
      <member refid="classnc_1_1_nd_array_1ada776db2a3c9ffef3dd7bf656cf75f08" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>dump</name></member>
      <member refid="classnc_1_1_nd_array_1a153d3032d72c24d233407a351d0f8174" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>end</name></member>
      <member refid="classnc_1_1_nd_array_1a229701da7e9b386f5a58e5f1dc00bb73" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>end</name></member>
      <member refid="classnc_1_1_nd_array_1a635448f7b5d598e3a978d2c2e62d7727" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>end</name></member>
      <member refid="classnc_1_1_nd_array_1a546c8b9de00188fab35a6c5075147cc1" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>end</name></member>
      <member refid="classnc_1_1_nd_array_1a349b83beffbfb0a631799f921f13f7ad" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>endianess</name></member>
      <member refid="classnc_1_1_nd_array_1ab368d4fa752a97f987dc4677c4756b37" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>endianess_</name></member>
      <member refid="classnc_1_1_nd_array_1a646ec787a3b7331b34c0c3f21e0d992d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>fill</name></member>
      <member refid="classnc_1_1_nd_array_1a91687e040d05ac06b389d389facff3c9" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>flatnonzero</name></member>
      <member refid="classnc_1_1_nd_array_1a22ba05b8e537c008a2143396b5995551" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>flatten</name></member>
      <member refid="classnc_1_1_nd_array_1aeabe57b820b8c8211565876e54d21422" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>front</name></member>
      <member refid="classnc_1_1_nd_array_1a823d56e88aa815d86d41e8b11d348a6a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>front</name></member>
      <member refid="classnc_1_1_nd_array_1a59be771816a45a247f0e15a27b7f10d2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>front</name></member>
      <member refid="classnc_1_1_nd_array_1aacff9537c7c8537583b70115626a420b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>front</name></member>
      <member refid="classnc_1_1_nd_array_1a9437732d220581563d44c800ce240e17" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>getByIndices</name></member>
      <member refid="classnc_1_1_nd_array_1a4da478ab5a1c836be7ad2f9d6bfed91e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>getByMask</name></member>
      <member refid="classnc_1_1_nd_array_1a3e5261e1be6357a2c608f5e1d97b35f9" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>isempty</name></member>
      <member refid="classnc_1_1_nd_array_1a344f12e052eeb49cc87e361127386a64" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>isflat</name></member>
      <member refid="classnc_1_1_nd_array_1a0ba38857fd4f9474e2814bbf1c3a6a0a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>issorted</name></member>
      <member refid="classnc_1_1_nd_array_1a302be17d815b1a4e353e6a2aade581a5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>issquare</name></member>
      <member refid="classnc_1_1_nd_array_1abec76b8f271e07fa07cc2f88fed676fa" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>item</name></member>
      <member refid="classnc_1_1_nd_array_1a33ce0c581a22e809cfc5a79a534bf798" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>iterator</name></member>
      <member refid="classnc_1_1_nd_array_1abbca6c205525a4b706729f9f36acc06d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>max</name></member>
      <member refid="classnc_1_1_nd_array_1a4d733d7a90d94c3f21e90ab79dc2cc14" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>median</name></member>
      <member refid="classnc_1_1_nd_array_1a7f0c49ac50a79ba24ea8d351ee70fd55" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>min</name></member>
      <member refid="classnc_1_1_nd_array_1aa7592409ea9bc24e4324725e5ff74ee9" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>nans</name></member>
      <member refid="classnc_1_1_nd_array_1a775e07af6829b5336969c703c4eddba7" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>nbytes</name></member>
      <member refid="classnc_1_1_nd_array_1a7b46bea4f56ab2327fc291dac4e75788" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a91801907e76fd8ecc9ce7ff3b85ea9bd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a8509cda74ae6f29995dd8a9f27d30d11" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1af8cd2e1b7214c4b8b8b784e1b5265c11" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a9b5658aaaff185187c964a6bf3f4f5a3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a1877502ba79a59c3a9b144e6111def1a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ad724d08ab913c125a38bc528e68cad8e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ad9ccdeb2572f239a33ca5fbb473b513a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a1847487093139deb6a541cfaa43c3d90" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a9d7045ecdff86bac3306a8bfd9a787eb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a00cddf06371547d613388cefeece2cc0" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ad94cfcf69d664d94e81fc98a0a61d193" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a567a45c944672939e89fa507236d1158" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a7b0f43ea1853dcc471949c0e7eb977f5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a46c4fbd999ab1d612586191a15ada4b7" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ad8160a6009ce9c0c8bbb384261ce18bb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a42c487740a599fc7906acbeea2fa766d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1aee44fee3e2c882d490898c082db39449" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1a7fcb1cf40a8402e8ba6353e58eed8dbd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ae04a364f503fe72c06d2f7cd78e712d6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1aa6bf0b18b1ebb54b2a1fd4e4b33253dd" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>NdArray</name></member>
      <member refid="classnc_1_1_nd_array_1ab3a36907429e26ac1ba65622af27914c" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>newArray</name></member>
      <member refid="classnc_1_1_nd_array_1a605c3eb54c62f43a462242bacbb34d11" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>newArray</name></member>
      <member refid="classnc_1_1_nd_array_1ae5fe2e501921c3361c0edc66030b772d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>newbyteorder</name></member>
      <member refid="classnc_1_1_nd_array_1a379f8cd88dc84a38d668cb7bf97078ee" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>none</name></member>
      <member refid="classnc_1_1_nd_array_1a6cc8c7b53a707468d6da112849970904" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>nonzero</name></member>
      <member refid="classnc_1_1_nd_array_1a0049b5d6d1d99463edc773f01eb7c091" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>numCols</name></member>
      <member refid="classnc_1_1_nd_array_1a2dbdc72c98c216a133f7e1a8d3c067f7" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>numRows</name></member>
      <member refid="classnc_1_1_nd_array_1ac6e5a0c875c593a6bc1970745af3684b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ones</name></member>
      <member refid="classnc_1_1_nd_array_1abf2c4d2e67b692c67e5aed62cd981800" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1aac0b806c621ce85a61f1370cc618fcc8" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1ab6ac5d2c6614d96d2bea64a4567036fc" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1a21c26fd8c8c107a71b19d7c27a42db29" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1ad7b3a47d68e5522966518eb0eaf10898" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator()</name></member>
      <member refid="classnc_1_1_nd_array_1abe4cda5855bc5d6aee488293000d1acb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator=</name></member>
      <member refid="classnc_1_1_nd_array_1ae5150db09cf7f76269b3254ceb0c43a8" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator=</name></member>
      <member refid="classnc_1_1_nd_array_1a5ff24670b2173fccf1c9a35b688f2683" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator=</name></member>
      <member refid="classnc_1_1_nd_array_1aa58a51df41648b4d39f2f972c60e09ae" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1aeabee2aba11a885f3bd874b7a06d62ea" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1a4744ab68830cc2cc16d8804295662b6a" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1ab04b63c2794747b88b0e640f737c6b2c" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1ae212e8367ba037800af651e2d00897b9" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>operator[]</name></member>
      <member refid="classnc_1_1_nd_array_1a63a1c0f9fdef078770e4f8cbe2c249ec" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ownsInternalData</name></member>
      <member refid="classnc_1_1_nd_array_1a5e31756835105267e51e573eb67d4d77" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>ownsPtr_</name></member>
      <member refid="classnc_1_1_nd_array_1a2fa17d38624fabcae789cfa3323b66d8" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>partition</name></member>
      <member refid="classnc_1_1_nd_array_1a288e6b26205492751717d3fb8854ca30" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>pointer</name></member>
      <member refid="classnc_1_1_nd_array_1a8729dc551775ca022cbfbf66b22c999b" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>print</name></member>
      <member refid="classnc_1_1_nd_array_1a1a95a48b1434d2260a265d13509f864d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>prod</name></member>
      <member refid="classnc_1_1_nd_array_1aabfb3d013e77626b7e423da910ab9ffb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ptp</name></member>
      <member refid="classnc_1_1_nd_array_1a02a06425d6284dbc370807ed11b1f7b2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a57e1fc57f28b17f5ba6b421b82066388" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1aa8f52298436a941b3e53b8204b0b85df" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a6a0bd2406380b080b0ab7565759bb660" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1ae8213735dca5d0ad895138f01aa70947" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1ab67c8f364caab7706d32041b2d01012d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a094424d8f368eaa3730102a5f75f0c2e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a2ebd28ce6f5227d42bd5c990a22d9f29" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a7ae6272ff9d4dea6c890ef6dcbae6eb4" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a17398abb49993b960a33bd14c0db399e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1af062cf00ee693dbd74d0f440b1cbded7" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1ad74b89f5bac37d089ee940ae8c225703" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>put</name></member>
      <member refid="classnc_1_1_nd_array_1a52e65ffbf29d168d53ac7605acb69b4e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>putMask</name></member>
      <member refid="classnc_1_1_nd_array_1aaf9229244e8984f557a823223ac35a29" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>putMask</name></member>
      <member refid="classnc_1_1_nd_array_1aeca85f2279281bd389225a76e23e1c45" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>ravel</name></member>
      <member refid="classnc_1_1_nd_array_1a06b5c7ba13ae9f8750bca6d5f3803c73" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a2aa9a0589da3c0b19b1b413e71f65667" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rbegin</name></member>
      <member refid="classnc_1_1_nd_array_1ad779b3d2a2f094370be77e515533f143" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a9f983aabd3568e7bd1be0a0c4e2b881d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a48fb313ad0eb8126c338a319a5a2fd98" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rcolbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a56704aea2c006973065aaa2848faa7fb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rcolbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a012f1203a072caeba4221aaa3c044186" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rcolbegin</name></member>
      <member refid="classnc_1_1_nd_array_1a5f70273a5bbff4f0b0c5086649939301" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rcolbegin</name></member>
      <member refid="classnc_1_1_nd_array_1ad5f870f49c9601930423258dcc723c8e" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rcolend</name></member>
      <member refid="classnc_1_1_nd_array_1a434f10a7956f425882fbbbc90038e4cb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rcolend</name></member>
      <member refid="classnc_1_1_nd_array_1a2d5976e4cd61862c74dce30c94f8fb87" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rcolend</name></member>
      <member refid="classnc_1_1_nd_array_1a51e2cddde9482a27bf73fa308e0268c6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rcolend</name></member>
      <member refid="classnc_1_1_nd_array_1adb4a1e1a3c3420c4b2133ba81a44a0e0" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>reference</name></member>
      <member refid="classnc_1_1_nd_array_1a92c90b8671a637ec7d7821f6e8bdfa56" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rend</name></member>
      <member refid="classnc_1_1_nd_array_1a9047b67188b652c471db37731659c598" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rend</name></member>
      <member refid="classnc_1_1_nd_array_1a59de727a0db449ca5a28d436c9cec165" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rend</name></member>
      <member refid="classnc_1_1_nd_array_1a93f962a3badfd82da685a2d7fdf006aa" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rend</name></member>
      <member refid="classnc_1_1_nd_array_1acd2185e49f9cbe68b3d3fe6cef552d34" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>repeat</name></member>
      <member refid="classnc_1_1_nd_array_1a7d72328d5853baedb1644ae387ed3331" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>repeat</name></member>
      <member refid="classnc_1_1_nd_array_1aefaba20fd8cf6710714340ea9733f1d5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>replace</name></member>
      <member refid="classnc_1_1_nd_array_1ace0dfa53f15057e5f505a41b67f000bb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>reshape</name></member>
      <member refid="classnc_1_1_nd_array_1aa646e053a4fcd7ef3356add1edb4240d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>reshape</name></member>
      <member refid="classnc_1_1_nd_array_1a81992957eaa4cf2da430e12296af79c7" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>reshape</name></member>
      <member refid="classnc_1_1_nd_array_1ac15af1559e8f8dcd8cd5930c5ce54377" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>resizeFast</name></member>
      <member refid="classnc_1_1_nd_array_1a1f999dc4afd08a9bc9c696af66d3ccb3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>resizeFast</name></member>
      <member refid="classnc_1_1_nd_array_1a091f587d753e4e4aec1bb6621ccbaa41" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>resizeSlow</name></member>
      <member refid="classnc_1_1_nd_array_1a9499c04345682f4bf0afd8a5d16df435" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>resizeSlow</name></member>
      <member refid="classnc_1_1_nd_array_1abc1bc6a854968940dac643396b2fb1b5" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>reverse_column_iterator</name></member>
      <member refid="classnc_1_1_nd_array_1a9987ced72f8182d4b55807c0177eab11" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>reverse_iterator</name></member>
      <member refid="classnc_1_1_nd_array_1a13b0f7af99772cfbca83b6734fbef04d" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>round</name></member>
      <member refid="classnc_1_1_nd_array_1ab24cce75b03204af139d8d32090cdae8" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>row</name></member>
      <member refid="classnc_1_1_nd_array_1af0fb0a32e08456603964206487aebc88" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>rSlice</name></member>
      <member refid="classnc_1_1_nd_array_1a2d1b4adfe3c9897ffe3dca45e357b2b4" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>shape</name></member>
      <member refid="classnc_1_1_nd_array_1a0119c45e6deefda84d29c88eb123bf23" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>shape_</name></member>
      <member refid="classnc_1_1_nd_array_1a055875abbe80163ca91328c0fa8ffbfa" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>size</name></member>
      <member refid="classnc_1_1_nd_array_1a1c6ce5e12d3d6fc8fc1c08dd756a7133" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>size_</name></member>
      <member refid="classnc_1_1_nd_array_1ae2bdede667042f52176de3f3649735f6" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>size_type</name></member>
      <member refid="classnc_1_1_nd_array_1a3c0a24c292c340c58a6da5526654f3bb" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>sort</name></member>
      <member refid="classnc_1_1_nd_array_1a9363d9a2ed992a07c11d07b62b1f237f" prot="private" virt="non-virtual"><scope>nc::NdArray</scope><name>STATIC_ASSERT_VALID_DTYPE</name></member>
      <member refid="classnc_1_1_nd_array_1aa44f94cc8d02a56636223686f30d84f1" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>str</name></member>
      <member refid="classnc_1_1_nd_array_1a467700098b002b5631c756ca0fd50cae" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>sum</name></member>
      <member refid="classnc_1_1_nd_array_1a7995ba04b64061dfd931ac58c05826f2" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>swapaxes</name></member>
      <member refid="classnc_1_1_nd_array_1aea0b5300f1a62b3fa51d0b18e5f0ce38" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>tofile</name></member>
      <member refid="classnc_1_1_nd_array_1a1fb3a21ab9c10a2684098df919b5b440" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>toStlVector</name></member>
      <member refid="classnc_1_1_nd_array_1ad58c8cb32887059d77903ff4c224e9f3" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>trace</name></member>
      <member refid="classnc_1_1_nd_array_1a78c99f8306415d8e0ac0e03bb69c6d29" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>transpose</name></member>
      <member refid="classnc_1_1_nd_array_1aed76b0d590eff875e09a6f0d7968e7db" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>value_type</name></member>
      <member refid="classnc_1_1_nd_array_1acac210ad3d3bd973be4bece6e6b625ed" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>zeros</name></member>
      <member refid="classnc_1_1_nd_array_1a7ef259d6b54cf8373721700b12c14500" prot="public" virt="non-virtual"><scope>nc::NdArray</scope><name>~NdArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
