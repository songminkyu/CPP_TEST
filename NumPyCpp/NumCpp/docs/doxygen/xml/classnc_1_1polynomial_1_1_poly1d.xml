<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classnc_1_1polynomial_1_1_poly1d" kind="class" language="C++" prot="public">
    <compoundname>nc::polynomial::Poly1d</compoundname>
    <includes refid="_poly1d_8hpp" local="no">Poly1d.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename dtype</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnc_1_1polynomial_1_1_poly1d_1a365cd5e23d46644381e3c884337ef2a1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; dtype &gt;</type>
        <definition>std::vector&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::coefficients_</definition>
        <argsstring></argsstring>
        <name>coefficients_</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="640" column="30" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="640" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a6b6ad1b7396b5632e2a78db0f32ac0f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nc::polynomial::Poly1d&lt; dtype &gt;::STATIC_ASSERT_ARITHMETIC</definition>
        <argsstring>(dtype)</argsstring>
        <name>STATIC_ASSERT_ARITHMETIC</name>
        <param>
          <type>dtype</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="61" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a30777a0dd9351cf64f96959dad0d9ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nc::polynomial::Poly1d&lt; dtype &gt;::Poly1d</definition>
        <argsstring>()=default</argsstring>
        <name>Poly1d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default Constructor (not very usefull, but needed for other containers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="69" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a33c01905d846d32e7d49dc4e7e884551" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::polynomial::Poly1d&lt; dtype &gt;::Poly1d</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inValues, bool isRoots=false)</argsstring>
        <name>Poly1d</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inValues</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isRoots</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValues</parametername>
</parameternamelist>
<parameterdescription>
<para>(polynomial coefficients in ascending order of power if second input is false, polynomial roots if second input is true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isRoots</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="79" column="13" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="79" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1adcbfe7e5fe2ed3b73bc5c81a73ece1cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::polynomial::Poly1d&lt; dtype &gt;::area</definition>
        <argsstring>(double a, double b) const</argsstring>
        <name>area</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the area under the curve between the two bounds</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="112" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="112" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a0cf03b40603f490af100cdc65140ab9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtypeOut</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtypeOut &gt;</type>
        <definition>Poly1d&lt;dtypeOut&gt; nc::polynomial::Poly1d&lt; dtype &gt;::astype</definition>
        <argsstring>() const</argsstring>
        <name>astype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the polynomial of the new type</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="130" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="130" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1abc31b5e093fd3ce5b2c14eade8d346a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt;</type>
        <definition>NdArray&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::coefficients</definition>
        <argsstring>() const</argsstring>
        <name>coefficients</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> coefficients</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="151" column="21" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a06b9fb8a31de37a067c9ed54af6295d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::deriv</definition>
        <argsstring>() const</argsstring>
        <name>deriv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes the derivative of the polynomial</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="162" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="162" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a4c2902780c89054a6ca436a72ac77119" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; double &gt;</type>
        <definition>Poly1d&lt;double&gt; nc::polynomial::Poly1d&lt; dtype &gt;::integ</definition>
        <argsstring>() const</argsstring>
        <name>integ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the integral of the polynomial</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="324" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="324" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1ac82910d648a2a3cfd2301e12907414dd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>dtype</type>
        <definition>dtype nc::polynomial::Poly1d&lt; dtype &gt;::operator()</definition>
        <argsstring>(dtype inValue) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluates the Poly1D object for the input value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="428" column="19" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="428" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1aab8cce6bf7a9400862d98684de8ef355" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::operator*</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="543" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="543" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a06293521430112062f975b4854090d24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
        <definition>Poly1d&lt;dtype&gt;&amp; nc::polynomial::Poly1d&lt; dtype &gt;::operator*=</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="557" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="557" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a65afb72ad35683688c7fb71ee77f839e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::operator+</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="449" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a44a0331a1cfc760d7b80bfc20b661366" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
        <definition>Poly1d&lt;dtype&gt;&amp; nc::polynomial::Poly1d&lt; dtype &gt;::operator+=</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="463" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="463" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1ade7b4f432e1056bc66d88a131a2cbf41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::operator-</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="496" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a732cca31f4b6180d0ad035a6daeb160a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
        <definition>Poly1d&lt;dtype&gt;&amp; nc::polynomial::Poly1d&lt; dtype &gt;::operator-=</definition>
        <argsstring>(const Poly1d&lt; dtype &gt; &amp;inOtherPoly)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inOtherPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the two <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> objects</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOtherPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="510" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="510" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a548c945121cb39859f649cf39a6d0830" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt;</type>
        <definition>Poly1d&lt;dtype&gt; nc::polynomial::Poly1d&lt; dtype &gt;::operator^</definition>
        <argsstring>(uint32 inPower) const</argsstring>
        <name>operator^</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inPower</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> to an integer power</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPower</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="588" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="588" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a930f53185992537e3eb5844ebb70bf38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
        <definition>Poly1d&lt;dtype&gt;&amp; nc::polynomial::Poly1d&lt; dtype &gt;::operator^=</definition>
        <argsstring>(uint32 inPower)</argsstring>
        <name>operator^=</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inPower</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> to an integer power</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inPower</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="602" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="602" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1ab978ca2f65c7cd640309c1be86aa9141" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
        <definition>uint32 nc::polynomial::Poly1d&lt; dtype &gt;::order</definition>
        <argsstring>() const noexcept</argsstring>
        <name>order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the order of the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref></para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="350" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1ab17f5e0983d6c66a3419cb331d158395" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::polynomial::Poly1d&lt; dtype &gt;::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the string representation of the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> object to the console </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="360" column="18" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1aa5c091077a037bab14a1c558ece21435" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nc::polynomial::Poly1d&lt; dtype &gt;::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts the polynomial to a string representation</para>
<para><simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="372" column="25" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="372" bodyend="417"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1a1526585db421bbf96dfb88d99870c201" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; double &gt;</type>
        <definition>static Poly1d&lt;double&gt; nc::polynomial::Poly1d&lt; dtype &gt;::fit</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;xValues, const NdArray&lt; dtype &gt; &amp;yValues, const NdArray&lt; dtype &gt; &amp;weights, uint8 polyOrder)</argsstring>
        <name>fit</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>xValues</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>yValues</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9ba5a0aa26753a185985b8273fb9062d" kindref="member">uint8</ref></type>
          <declname>polyOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Polynomial linear least squares regression: Ax = b</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xValues</parametername>
</parameternamelist>
<parameterdescription>
<para>the x measurements [1, n] or [n, 1] array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yValues</parametername>
</parameternamelist>
<parameterdescription>
<para>the y measurements [n, 1] array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>the measurement weights [1, n] or [n, 1] array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the poly nomial to fit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="248" column="27" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="248" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1polynomial_1_1_poly1d_1abd9c3ff549505b8c42b4a4e97ff95b2c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; double &gt;</type>
        <definition>static Poly1d&lt;double&gt; nc::polynomial::Poly1d&lt; dtype &gt;::fit</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;xValues, const NdArray&lt; dtype &gt; &amp;yValues, uint8 polyOrder)</argsstring>
        <name>fit</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>xValues</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>yValues</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a9ba5a0aa26753a185985b8273fb9062d" kindref="member">uint8</ref></type>
          <declname>polyOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Polynomial linear least squares regression: Ax = b</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xValues</parametername>
</parameternamelist>
<parameterdescription>
<para>the x measurements [1, n] or [n, 1] array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yValues</parametername>
</parameternamelist>
<parameterdescription>
<para>the y measurements [n, 1] array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polyOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the poly nomial to fit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="193" column="27" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="193" bodyend="237"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnc_1_1polynomial_1_1_poly1d_1a589d9ff132413fa86a20f2fa7910e5df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;inOStream, const Poly1d&lt; dtype &gt; &amp;inPoly)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>inOStream</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref>&lt; dtype &gt; &amp;</type>
          <declname>inPoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>io operator for the <ref refid="classnc_1_1polynomial_1_1_poly1d" kindref="compound">Poly1d</ref> class</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOStream</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inPoly</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="633" column="20" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="633" bodyend="637"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A one-dimensional polynomial class. A convenience class, used to encapsulate &quot;natural&quot; operations on polynomials </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nc::polynomial::Poly1d&lt; dtype &gt;</label>
        <link refid="classnc_1_1polynomial_1_1_poly1d"/>
      </node>
    </collaborationgraph>
    <location file="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" line="59" column="1" bodyfile="C:/Github/NumCpp/include/NumCpp/Polynomial/Poly1d.hpp" bodystart="58" bodyend="641"/>
    <listofallmembers>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1adcbfe7e5fe2ed3b73bc5c81a73ece1cb" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>area</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a0cf03b40603f490af100cdc65140ab9f" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>astype</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1abc31b5e093fd3ce5b2c14eade8d346a9" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>coefficients</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a365cd5e23d46644381e3c884337ef2a1" prot="private" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>coefficients_</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a06b9fb8a31de37a067c9ed54af6295d2" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>deriv</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1abd9c3ff549505b8c42b4a4e97ff95b2c" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>fit</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a1526585db421bbf96dfb88d99870c201" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>fit</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a4c2902780c89054a6ca436a72ac77119" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>integ</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1ac82910d648a2a3cfd2301e12907414dd" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator()</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1aab8cce6bf7a9400862d98684de8ef355" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator*</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a06293521430112062f975b4854090d24" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator*=</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a65afb72ad35683688c7fb71ee77f839e" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator+</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a44a0331a1cfc760d7b80bfc20b661366" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator+=</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1ade7b4f432e1056bc66d88a131a2cbf41" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator-</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a732cca31f4b6180d0ad035a6daeb160a" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator-=</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a589d9ff132413fa86a20f2fa7910e5df" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a548c945121cb39859f649cf39a6d0830" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator^</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a930f53185992537e3eb5844ebb70bf38" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>operator^=</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1ab978ca2f65c7cd640309c1be86aa9141" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>order</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a30777a0dd9351cf64f96959dad0d9ba5" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>Poly1d</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a33c01905d846d32e7d49dc4e7e884551" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>Poly1d</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1ab17f5e0983d6c66a3419cb331d158395" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>print</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1a6b6ad1b7396b5632e2a78db0f32ac0f1" prot="private" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>STATIC_ASSERT_ARITHMETIC</name></member>
      <member refid="classnc_1_1polynomial_1_1_poly1d_1aa5c091077a037bab14a1c558ece21435" prot="public" virt="non-virtual"><scope>nc::polynomial::Poly1d</scope><name>str</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
