<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_interface_with_open_c_v_8cpp-example" kind="example">
    <compoundname>InterfaceWithOpenCV.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Example for interfaceing with OpenCV Mat <programlisting filename="InterfaceWithOpenCV.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_num_cpp_8hpp" kindref="compound">NumCpp.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;opencv2/core/core.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;opencv2/highgui/highgui.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">constexpr<sp/><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">nc::uint32</ref><sp/>NUM_ROWS<sp/>=<sp/>512;</highlight></codeline>
<codeline><highlight class="normal">constexpr<sp/><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">nc::uint32</ref><sp/>NUM_COLS<sp/>=<sp/>512;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>ramp<sp/>image<sp/>with<sp/>NumCpp</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>numHalfCols<sp/>=<sp/>NUM_COLS<sp/>/<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>integer<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ncArray<sp/>=<sp/><ref refid="classnc_1_1_nd_array" kindref="compound">nc::NdArray&lt;nc::uint8&gt;</ref>(NUM_ROWS,<sp/>NUM_COLS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">nc::uint32</ref><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>ncArray.numRows();<sp/>++row)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>ncArray.begin(row);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(begin,<sp/>begin<sp/>+<sp/>numHalfCols,<sp/><ref refid="namespacenc_1a9ba5a0aa26753a185985b8273fb9062d" kindref="member">nc::uint8</ref>{0});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rbegin<sp/>=<sp/>ncArray.rbegin(row);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(rbegin,<sp/>rbegin<sp/>+<sp/>numHalfCols,<sp/><ref refid="namespacenc_1a9ba5a0aa26753a185985b8273fb9062d" kindref="member">nc::uint8</ref>{0});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>OpenCV<sp/>Mat</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cvArray<sp/>=<sp/>cv::Mat(ncArray.numRows(),<sp/>ncArray.numCols(),<sp/>CV_8SC1,<sp/>ncArray.data());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>display<sp/>the<sp/>OpenCV<sp/>Mat</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::namedWindow(</highlight><highlight class="stringliteral">&quot;Display<sp/>window&quot;</highlight><highlight class="normal">,<sp/>cv::WINDOW_AUTOSIZE);<sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>window<sp/>for<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;Display<sp/>window&quot;</highlight><highlight class="normal">,<sp/>cvArray);<sp/></highlight><highlight class="comment">//<sp/>Show<sp/>our<sp/>image<sp/>inside<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::waitKey(0);<sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>a<sp/>keystroke<sp/>in<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tranpose<sp/>the<sp/>Mat<sp/>with<sp/>OpenCV</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transposedCvArray<sp/>=<sp/>cv::Mat(cvArray.cols,<sp/>cvArray.rows,<sp/>CV_8SC1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenc_1aa6c78ac10e4c3aa446716f80aa1a72ca" kindref="member">cv::transpose</ref>(cvArray,<sp/>transposedCvArray);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>display<sp/>the<sp/>transposed<sp/>Mat</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::namedWindow(</highlight><highlight class="stringliteral">&quot;Display<sp/>window&quot;</highlight><highlight class="normal">,<sp/>cv::WINDOW_AUTOSIZE);<sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>window<sp/>for<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;Display<sp/>window&quot;</highlight><highlight class="normal">,<sp/>transposedCvArray);<sp/></highlight><highlight class="comment">//<sp/>Show<sp/>our<sp/>image<sp/>inside<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::waitKey(0);<sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>a<sp/>keystroke<sp/>in<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>transposed<sp/>OpenCV<sp/>Mat<sp/>to<sp/>a<sp/>NumCpp<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transposedNcArray<sp/>=<sp/><ref refid="classnc_1_1_nd_array" kindref="compound">nc::NdArray&lt;nc::uint8&gt;</ref>(transposedCvArray.data,<sp/>transposedCvArray.rows,<sp/>transposedCvArray.cols);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>two<sp/>transposed<sp/>arrays<sp/>are<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacenc_1a0e8c1396cc01ccd9ec8ba549b6347e21" kindref="member">nc::array_equal</ref>(transposedNcArray,<sp/>ncArray.transpose()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Arrays<sp/>are<sp/>equal.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Arrays<sp/>are<sp/>not<sp/>equal.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
