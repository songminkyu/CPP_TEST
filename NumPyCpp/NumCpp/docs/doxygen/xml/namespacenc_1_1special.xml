<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacenc_1_1special" kind="namespace" language="C++">
    <compoundname>nc::special</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenc_1_1special_1a90c6b73247014e03767ad66cefccc4d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::airy_ai</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>airy_ai</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_ai.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/airy_ai.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ae5fa8cc4efa56e60d061600b3f6903b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::airy_ai</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>airy_ai</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_ai.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/airy_ai.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1abd997d345e8fdf5440c0c16548113d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::airy_ai_prime</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>airy_ai_prime</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The derivative of the first linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_ai_prime.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/airy_ai_prime.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a10516c44f9bd0fb906dd12122401187a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::airy_ai_prime</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>airy_ai_prime</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The derivative of the first linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_ai_prime.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/airy_ai_prime.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9ea0f9f510fa0c67639ebf17690271d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::airy_bi</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>airy_bi</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The second linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_bi.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/airy_bi.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a6e23c4a5cc7f4a44b384b0c2a9f3c56f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::airy_bi</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>airy_bi</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The second linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_bi.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/airy_bi.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9646b2d48062cebaeb627ab0ed8c68c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::airy_bi_prime</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>airy_bi_prime</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The derivative of the second linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_bi_prime.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/airy_bi_prime.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ab85b0e2d663c5ff84f92e321b9146ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::airy_bi_prime</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>airy_bi_prime</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The derivative of the second linearly independent solution to the differential equation y&apos;&apos; - yz = 0. <ulink url="http://mathworld.wolfram.com/AiryFunctions.html">http://mathworld.wolfram.com/AiryFunctions.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_bi_prime.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/airy_bi_prime.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a59caf35b816a219aa2782dd45df207ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::bernoilli</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inArray)</argsstring>
        <name>bernoilli</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Both return the nth Bernoulli number B2n.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bernoulli.hpp" line="73" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bernoulli.hpp" bodystart="73" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a1af26e52a24fca2b572605ec4b2c1f1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::special::bernoilli</definition>
        <argsstring>(uint32 n)</argsstring>
        <name>bernoilli</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Both return the nth Bernoulli number B2n.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bernoulli.hpp" line="50" column="23" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bernoulli.hpp" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a92141b6d9ffda6c68c7cb13dee3eae60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_in</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX)</argsstring>
        <name>bessel_in</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modified Cylindrical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_in.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_in.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a6e9dbda70e7c0732d0b63ea389e5af49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_in</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>bessel_in</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modified Cylindrical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_in.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_in.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a85979b28c3403361a3e818c9cf8cdf16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_in_prime</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX)</argsstring>
        <name>bessel_in_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Modified Cylindrical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_in_prime.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_in_prime.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a416353fb98d37ed2e1a8ab587a16f6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_in_prime</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>bessel_in_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Modified Cylindrical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_in_prime.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_in_prime.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ab310a9680ad09bc52377898876a27620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_jn</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX)</argsstring>
        <name>bessel_jn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cylindrical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_jn.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_jn.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a3986d3b42ddcd747d40fb6772b49536e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_jn</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>bessel_jn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cylindrical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_jn.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_jn.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a6e4139a3ecc85275c4690d01453366dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_jn_prime</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX)</argsstring>
        <name>bessel_jn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Cylindrical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_jn_prime.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_jn_prime.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a3eef0d1e8d31602e816578f778feefb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_jn_prime</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>bessel_jn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Cylindrical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_jn_prime.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_jn_prime.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a5727fa899a61975ffcb79d84fd2d231b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_kn</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX)</argsstring>
        <name>bessel_kn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modified Cylindrical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_kn.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_kn.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a614d69a09535948c87124fe5662452dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_kn</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>bessel_kn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modified Cylindrical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_kn.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_kn.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a98aad61d58f7d046091f6f569d2c97fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_kn_prime</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX)</argsstring>
        <name>bessel_kn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Modified Cylindrical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_kn_prime.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_kn_prime.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aa3159d6cbb77b6bc1b913c25d969fa3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_kn_prime</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>bessel_kn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Modified Cylindrical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_kn_prime.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_kn_prime.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a2a215c5881fc0d98e444942d3a67ed5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_yn</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX)</argsstring>
        <name>bessel_yn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cylindrical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_yn.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_yn.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a55bbc44ffde64dfb7af7a803250cd2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_yn</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>bessel_yn</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cylindrical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_yn.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_yn.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a129b71949a9659519aea36dc64d47020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_yn_prime</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArrayX)</argsstring>
        <name>bessel_yn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Cylindrical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_yn_prime.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_yn_prime.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a742272fb70f0b85164b61409ad3f464f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::bessel_yn_prime</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>bessel_yn_prime</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derivcative of the Cylindrical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/bessel_yn_prime.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/bessel_yn_prime.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ad2ac5c7add77e243dc39899c15ad93e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::beta</definition>
        <argsstring>(const NdArray&lt; dtype1 &gt; &amp;inArrayA, const NdArray&lt; dtype2 &gt; &amp;inArrayB)</argsstring>
        <name>beta</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype1 &gt; &amp;</type>
          <declname>inArrayA</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArrayB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The beta function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArrayA</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayB</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/beta.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/beta.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9b74f451f99338c909b7f73df6e5bff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::beta</definition>
        <argsstring>(dtype1 a, dtype2 b)</argsstring>
        <name>beta</name>
        <param>
          <type>dtype1</type>
          <declname>a</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The beta function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/beta.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/beta.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a8249c674798e782f98a90942818ab395" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::special::cnr</definition>
        <argsstring>(uint32 n, uint32 r)</argsstring>
        <name>cnr</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of combinations of n choose r. C(n, r)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items taken </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/cnr.hpp" line="52" column="23" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/cnr.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ae7053cd6eafb59a62ba6ede63aac6f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::cyclic_hankel_1</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inX)</argsstring>
        <name>cyclic_hankel_1</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hankel funcion of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;std::complex&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/cyclic_hankel_1.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/cyclic_hankel_1.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1af5dd42de33ec77dda47dd089561895d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::cyclic_hankel_1</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>cyclic_hankel_1</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hankel funcion of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::complex&lt;double&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/cyclic_hankel_1.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/cyclic_hankel_1.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a8e3b27238d1cae20e4ee071766549c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::cyclic_hankel_2</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inX)</argsstring>
        <name>cyclic_hankel_2</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hankel funcion of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;std::complex&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/cyclic_hankel_2.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/cyclic_hankel_2.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a388472a49e89f21b3eb144368fe55664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::cyclic_hankel_2</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>cyclic_hankel_2</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hankel funcion of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::complex&lt;&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/cyclic_hankel_2.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/cyclic_hankel_2.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a6419633142287d898c551f99cd7c589d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::digamma</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>digamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the digamma or psi function of values in inArray. Digamma is defined as the logarithmic derivative of the gamma function:</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/digamma.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/digamma.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a78dead2375df379d1976ff87f62fbade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::digamma</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>digamma</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the digamma or psi function of inValue. Digamma is defined as the logarithmic derivative of the gamma function:</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/digamma.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/digamma.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a5b7ac05949538787c3fdec373cb05126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::erf</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>erf</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the error function of all elements in the input array. Integral (from [-x, x]) of np.exp(np.power(-t, 2)) dt, multiplied by 1/np.pi.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/erf.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/erf.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a8b2da132f8a6d86ea0bcce34819d1833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::erf</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>erf</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the error function of all elements in the input array. Integral (from [-x, x]) of np.exp(np.power(-t, 2)) dt, multiplied by 1/np.pi.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/erf.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/erf.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1abab69146b99ff384c6de4a24da69a780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::erf_inv</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>erf_inv</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse error function of z, that is a value x such that: z = erf(x)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/erf_inv.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/erf_inv.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a0f66785ec1e2643dd4c932ff7cae61a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::erf_inv</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>erf_inv</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse error function of z, that is a value x such that: z = erf(x)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/erf_inv.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/erf_inv.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a8671b7ab0e06230889f4a0cf417a248f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::erfc</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>erfc</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the element-wise complement of the error function of inValue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/erfc.hpp" line="69" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/erfc.hpp" bodystart="69" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a1673dca59c73c85eedf077fb62aab5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::erfc</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>erfc</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the complement of the error function of inValue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/erfc.hpp" line="51" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/erfc.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a3c9551b639e79ce3024fef298f4ace8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::erfc_inv</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>erfc_inv</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse complementary error function of z, that is a value x such that: z = erfc(x)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/erfc_inv.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/erfc_inv.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a653404a544d777c6d7d636a207ee7bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::erfc_inv</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>erfc_inv</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse complentary error function of z, that is a value x such that: z = erfc(x)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/erfc_inv.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/erfc_inv.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a7ab9b16b9bcb43038db57b7d21a90304" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::factorial</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inArray)</argsstring>
        <name>factorial</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the factorial of the input value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/factorial.hpp" line="71" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/factorial.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a429b2caa6cf7fcbdba8ce3184c0367e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::special::factorial</definition>
        <argsstring>(uint32 inValue)</argsstring>
        <name>factorial</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the factorial of the input value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/factorial.hpp" line="52" column="23" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/factorial.hpp" bodystart="52" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a07a3d6d5e0610dca66ca975cdf1d34b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::gamma</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>gamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the &quot;true gamma&quot; of values in array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/gamma.hpp" line="68" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/gamma.hpp" bodystart="68" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aad22d353f040026576c4a28727ecaf35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::gamma</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>gamma</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the &quot;true gamma&quot; of value z</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/gamma.hpp" line="51" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/gamma.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a7b98a5eedb6e5354adbab8dcfe1ce4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::gamma1pm1</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>gamma1pm1</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the true gamma(dz + 1) - 1 of values in array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/gamma1pm1.hpp" line="68" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/gamma1pm1.hpp" bodystart="68" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9ea9c889891f9f3a071c786d0b947e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::gamma1pm1</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>gamma1pm1</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the true gamma(dz + 1) - 1 of value z</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/gamma1pm1.hpp" line="51" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/gamma1pm1.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1addebe777849a11f027a793975a53b653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::log_gamma</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>log_gamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns natural log of the true gamma of values in array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/log_gamma.hpp" line="68" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/log_gamma.hpp" bodystart="68" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a11ec3d4677a53eafd8b0144cd6e42ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::log_gamma</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>log_gamma</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns natural log of the true gamma of value z</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/log_gamma.hpp" line="51" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/log_gamma.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1ab52643e0c6a859c47871094023c834b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::special::pnr</definition>
        <argsstring>(uint32 n, uint32 r)</argsstring>
        <name>pnr</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of permutaions of n choose r. P(n, r)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items taken </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/pnr.hpp" line="50" column="23" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/pnr.hpp" bodystart="50" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a1aab975128b9cfbd175699a9587b34d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::polygamma</definition>
        <argsstring>(uint32 n, const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>polygamma</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the polygamma function of the values in inArray. Polygamma is defined as the n&apos;th derivative of the digamma function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the nth derivative </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/polygamma.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/polygamma.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a132b29cd86870cdd360652baeb54c663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::polygamma</definition>
        <argsstring>(uint32 n, dtype inValue)</argsstring>
        <name>polygamma</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the polygamma function of inValue. Polygamma is defined as the n&apos;th derivative of the digamma function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the nth derivative </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/polygamma.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/polygamma.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a9fa95a2e2a03a5eff8ea2f9e0594b206" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt;</type>
        <definition>NdArray&lt;uint32&gt; nc::special::prime</definition>
        <argsstring>(const NdArray&lt; uint32 &gt; &amp;inArray)</argsstring>
        <name>prime</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; <ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref> &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function prime provides fast table lookup to the first 10000 prime numbers (starting from 2 as the zeroth prime: as 1 isn&apos;t terribly useful in practice)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NdArray&lt;uint32&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/prime.hpp" line="74" column="24" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/prime.hpp" bodystart="74" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a2e0b9f447fd033ac62a0dfe3eadb46cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
        <definition>uint32 nc::special::prime</definition>
        <argsstring>(uint32 n)</argsstring>
        <name>prime</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function prime provides fast table lookup to the first 10000 prime numbers (starting from 2 as the zeroth prime: as 1 isn&apos;t terribly useful in practice)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the nth prime number to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/prime.hpp" line="54" column="23" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/prime.hpp" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a6a4ac80df3e9946630cf330d03cbbbd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::riemann_zeta</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>riemann_zeta</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Riemann Zeta function <ulink url="https://en.wikipedia.org/wiki/Riemann_zeta_function">https://en.wikipedia.org/wiki/Riemann_zeta_function</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/riemann_zeta.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/riemann_zeta.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a8d31d086f833496ad7eb98c5bd6304a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::riemann_zeta</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>riemann_zeta</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Riemann Zeta function <ulink url="https://en.wikipedia.org/wiki/Riemann_zeta_function">https://en.wikipedia.org/wiki/Riemann_zeta_function</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/riemann_zeta.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/riemann_zeta.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a459176cc2a1b285e93c3ee5671294590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; double &gt;</type>
        <definition>NdArray&lt;double&gt; nc::special::softmax</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray, Axis inAxis=Axis::NONE)</argsstring>
        <name>softmax</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <param>
          <type><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84" kindref="member">Axis</ref></type>
          <declname>inAxis</declname>
          <defval><ref refid="namespacenc_1a5edb9ac6f596ae1256faa3f5d797dc84ab50339a10e1de285ac99d4c3990b8693" kindref="member">Axis::NONE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The softmax function transforms each element of a collection by computing the exponential of each element divided by the sum of the exponentials of all the elements. That is, if x is a one-dimensional numpy array: softmax(x) = np.exp(x)/sum(np.exp(x))</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional, default NONE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray&lt;double&gt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/softmax.hpp" line="53" column="17" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/softmax.hpp" bodystart="53" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aa7f12646500dfd811792934164f8f403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::spherical_bessel_jn</definition>
        <argsstring>(uint32 inV, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>spherical_bessel_jn</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/spherical_bessel_jn.hpp" line="68" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/spherical_bessel_jn.hpp" bodystart="68" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a979e99d8a1626829183e38f69486e263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::spherical_bessel_jn</definition>
        <argsstring>(uint32 inV, dtype inX)</argsstring>
        <name>spherical_bessel_jn</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Bessel function of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/spherical_bessel_jn.hpp" line="51" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/spherical_bessel_jn.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a11378004d6f60a0ecf65470d071985b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::spherical_bessel_yn</definition>
        <argsstring>(uint32 inV, const NdArray&lt; dtype &gt; &amp;inArrayX)</argsstring>
        <name>spherical_bessel_yn</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArrayX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArrayX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/spherical_bessel_yn.hpp" line="68" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/spherical_bessel_yn.hpp" bodystart="68" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a1628a418aa8896a4f9711083ac5579d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::spherical_bessel_yn</definition>
        <argsstring>(uint32 inV, dtype inX)</argsstring>
        <name>spherical_bessel_yn</name>
        <param>
          <type><ref refid="namespacenc_1af0f49663fb63332596e2e6327009d581" kindref="member">uint32</ref></type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Bessel function of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/spherical_bessel_yn.hpp" line="51" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/spherical_bessel_yn.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a239954539e877214833b9cfe65f742db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::spherical_hankel_1</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArray)</argsstring>
        <name>spherical_hankel_1</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Hankel funcion of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para>the input values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/spherical_hankel_1.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/spherical_hankel_1.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a5c0f4be297580a6d46f89b851c948227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::spherical_hankel_1</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>spherical_hankel_1</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Hankel funcion of the first kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/spherical_hankel_1.hpp" line="53" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/spherical_hankel_1.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1aa0181306ece55cbaf50c65da8d215542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::spherical_hankel_2</definition>
        <argsstring>(dtype1 inV, const NdArray&lt; dtype2 &gt; &amp;inArray)</argsstring>
        <name>spherical_hankel_2</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype2 &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Hankel funcion of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/spherical_hankel_2.hpp" line="71" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/spherical_hankel_2.hpp" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a767d00adf7283b45bd3b7ea4aab6c5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype1</type>
          </param>
          <param>
            <type>typename dtype2</type>
          </param>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; nc::special::spherical_hankel_2</definition>
        <argsstring>(dtype1 inV, dtype2 inX)</argsstring>
        <name>spherical_hankel_2</name>
        <param>
          <type>dtype1</type>
          <declname>inV</declname>
        </param>
        <param>
          <type>dtype2</type>
          <declname>inX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spherical Hankel funcion of the second kind</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inV</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the bessel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inX</parametername>
</parameternamelist>
<parameterdescription>
<para>the input value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/spherical_hankel_2.hpp" line="53" column="22" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/spherical_hankel_2.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a0df9137d28cb3421435b464cbc482d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::trigamma</definition>
        <argsstring>(const NdArray&lt; dtype &gt; &amp;inArray)</argsstring>
        <name>trigamma</name>
        <param>
          <type>const <ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref>&lt; dtype &gt; &amp;</type>
          <declname>inArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the trigamma function of x. Trigamma is defined as the derivative of the digamma function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inArray</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnc_1_1_nd_array" kindref="compound">NdArray</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/trigamma.hpp" line="70" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/trigamma.hpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenc_1_1special_1a8f98455b0421ab89f4722377d9606091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename dtype</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nc::special::trigamma</definition>
        <argsstring>(dtype inValue)</argsstring>
        <name>trigamma</name>
        <param>
          <type>dtype</type>
          <declname>inValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the trigamma function of x. Trigamma is defined as the derivative of the digamma function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated-result-type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Github/NumCpp/include/NumCpp/Special/trigamma.hpp" line="52" column="14" bodyfile="C:/Github/NumCpp/include/NumCpp/Special/trigamma.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Github/NumCpp/include/NumCpp/Special/airy_ai.hpp" line="40" column="1"/>
  </compounddef>
</doxygen>
